//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 PDLGrammar.g 2013-10-18 11:23:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591

using System.Text;

using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  AutomataPDL.Parse 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class PDLGrammarLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int CHAR=4;
	public const int FOVARIABLE=5;
	public const int INT=6;
	public const int SOVARIABLE=7;
	public const int STRING=8;
	public const int WS=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;

	  public override void  ReportError(RecognitionException re) {
	       if(re is NoViableAltException)
	       {
	            var e = re as NoViableAltException;
	                StringBuilder msg = new StringBuilder();
	                msg.AppendFormat("Position {0}: bad input after  '{1}'", e.CharPositionInLine, e.Token!=null? e.Token.Text: ((char)e.Character).ToString());
	                throw new Parse.PDLParseException(msg.ToString());
	       }
	       else{
	            if (re is MismatchedTokenException)
	            {
	            	var e = re as MismatchedTokenException;
	                StringBuilder msg = new StringBuilder();
	                msg.AppendFormat("Position {0}: unexpected input '{1}', expecting {2}", e.CharPositionInLine, e.Token!=null? e.Token.Text: ((char)e.Character).ToString(),
	                    e.TokenNames != null ? e.TokenNames[e.Expecting] : ((char)e.Expecting).ToString());
	                throw new Parse.PDLParseException(msg.ToString());
	            }
	            else
	            if(re is EarlyExitException)
	            {
	            	var e = re as EarlyExitException;
	                StringBuilder msg = new StringBuilder();
	                msg.AppendFormat("Position {0}: something missing at input '{1}'", e.CharPositionInLine, e.Token.Text);
	                throw new Parse.PDLParseException(msg.ToString());
	            }
	            else
	                throw new PDLParseException(re.ToString());
	       }
	  }


    // delegates
    // delegators

	public PDLGrammarLexer()
	{
		OnCreated();
	}

	public PDLGrammarLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public PDLGrammarLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "PDLGrammar.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__10() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__10() {}

    // $ANTLR start "T__10"
    [GrammarRule("T__10")]
    private void mT__10()
    {
    	EnterRule_T__10();
    	EnterRule("T__10", 1);
    	TraceIn("T__10", 1);
    		try
    		{
    		int _type = T__10;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:41:7: ( '!' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:41:9: '!'
    		{
    		DebugLocation(41, 9);
    		Match('!'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__10", 1);
    		LeaveRule("T__10", 1);
    		LeaveRule_T__10();
        }
    }
    // $ANTLR end "T__10"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__11() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__11() {}

    // $ANTLR start "T__11"
    [GrammarRule("T__11")]
    private void mT__11()
    {
    	EnterRule_T__11();
    	EnterRule("T__11", 2);
    	TraceIn("T__11", 2);
    		try
    		{
    		int _type = T__11;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:42:7: ( '%' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:42:9: '%'
    		{
    		DebugLocation(42, 9);
    		Match('%'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__11", 2);
    		LeaveRule("T__11", 2);
    		LeaveRule_T__11();
        }
    }
    // $ANTLR end "T__11"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__12() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__12() {}

    // $ANTLR start "T__12"
    [GrammarRule("T__12")]
    private void mT__12()
    {
    	EnterRule_T__12();
    	EnterRule("T__12", 3);
    	TraceIn("T__12", 3);
    		try
    		{
    		int _type = T__12;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:43:7: ( '&' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:43:9: '&'
    		{
    		DebugLocation(43, 9);
    		Match('&'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__12", 3);
    		LeaveRule("T__12", 3);
    		LeaveRule_T__12();
        }
    }
    // $ANTLR end "T__12"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__13() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__13() {}

    // $ANTLR start "T__13"
    [GrammarRule("T__13")]
    private void mT__13()
    {
    	EnterRule_T__13();
    	EnterRule("T__13", 4);
    	TraceIn("T__13", 4);
    		try
    		{
    		int _type = T__13;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:44:7: ( '(' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:44:9: '('
    		{
    		DebugLocation(44, 9);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__13", 4);
    		LeaveRule("T__13", 4);
    		LeaveRule_T__13();
        }
    }
    // $ANTLR end "T__13"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__14() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__14() {}

    // $ANTLR start "T__14"
    [GrammarRule("T__14")]
    private void mT__14()
    {
    	EnterRule_T__14();
    	EnterRule("T__14", 5);
    	TraceIn("T__14", 5);
    		try
    		{
    		int _type = T__14;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:45:7: ( ')' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:45:9: ')'
    		{
    		DebugLocation(45, 9);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__14", 5);
    		LeaveRule("T__14", 5);
    		LeaveRule_T__14();
        }
    }
    // $ANTLR end "T__14"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__15() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__15() {}

    // $ANTLR start "T__15"
    [GrammarRule("T__15")]
    private void mT__15()
    {
    	EnterRule_T__15();
    	EnterRule("T__15", 6);
    	TraceIn("T__15", 6);
    		try
    		{
    		int _type = T__15;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:46:7: ( ',' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:46:9: ','
    		{
    		DebugLocation(46, 9);
    		Match(','); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__15", 6);
    		LeaveRule("T__15", 6);
    		LeaveRule_T__15();
        }
    }
    // $ANTLR end "T__15"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__16() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__16() {}

    // $ANTLR start "T__16"
    [GrammarRule("T__16")]
    private void mT__16()
    {
    	EnterRule_T__16();
    	EnterRule("T__16", 7);
    	TraceIn("T__16", 7);
    		try
    		{
    		int _type = T__16;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:47:7: ( '-->' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:47:9: '-->'
    		{
    		DebugLocation(47, 9);
    		Match("-->"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__16", 7);
    		LeaveRule("T__16", 7);
    		LeaveRule_T__16();
        }
    }
    // $ANTLR end "T__16"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__17() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__17() {}

    // $ANTLR start "T__17"
    [GrammarRule("T__17")]
    private void mT__17()
    {
    	EnterRule_T__17();
    	EnterRule("T__17", 8);
    	TraceIn("T__17", 8);
    		try
    		{
    		int _type = T__17;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:48:7: ( '->' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:48:9: '->'
    		{
    		DebugLocation(48, 9);
    		Match("->"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__17", 8);
    		LeaveRule("T__17", 8);
    		LeaveRule_T__17();
        }
    }
    // $ANTLR end "T__17"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__18() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__18() {}

    // $ANTLR start "T__18"
    [GrammarRule("T__18")]
    private void mT__18()
    {
    	EnterRule_T__18();
    	EnterRule("T__18", 9);
    	TraceIn("T__18", 9);
    		try
    		{
    		int _type = T__18;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:49:7: ( '.' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:49:9: '.'
    		{
    		DebugLocation(49, 9);
    		Match('.'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__18", 9);
    		LeaveRule("T__18", 9);
    		LeaveRule_T__18();
        }
    }
    // $ANTLR end "T__18"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__19() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__19() {}

    // $ANTLR start "T__19"
    [GrammarRule("T__19")]
    private void mT__19()
    {
    	EnterRule_T__19();
    	EnterRule("T__19", 10);
    	TraceIn("T__19", 10);
    		try
    		{
    		int _type = T__19;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:50:7: ( '<' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:50:9: '<'
    		{
    		DebugLocation(50, 9);
    		Match('<'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__19", 10);
    		LeaveRule("T__19", 10);
    		LeaveRule_T__19();
        }
    }
    // $ANTLR end "T__19"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__20() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__20() {}

    // $ANTLR start "T__20"
    [GrammarRule("T__20")]
    private void mT__20()
    {
    	EnterRule_T__20();
    	EnterRule("T__20", 11);
    	TraceIn("T__20", 11);
    		try
    		{
    		int _type = T__20;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:51:7: ( '<->' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:51:9: '<->'
    		{
    		DebugLocation(51, 9);
    		Match("<->"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__20", 11);
    		LeaveRule("T__20", 11);
    		LeaveRule_T__20();
        }
    }
    // $ANTLR end "T__20"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__21() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__21() {}

    // $ANTLR start "T__21"
    [GrammarRule("T__21")]
    private void mT__21()
    {
    	EnterRule_T__21();
    	EnterRule("T__21", 12);
    	TraceIn("T__21", 12);
    		try
    		{
    		int _type = T__21;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:52:7: ( '<=' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:52:9: '<='
    		{
    		DebugLocation(52, 9);
    		Match("<="); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__21", 12);
    		LeaveRule("T__21", 12);
    		LeaveRule_T__21();
        }
    }
    // $ANTLR end "T__21"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__22() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__22() {}

    // $ANTLR start "T__22"
    [GrammarRule("T__22")]
    private void mT__22()
    {
    	EnterRule_T__22();
    	EnterRule("T__22", 13);
    	TraceIn("T__22", 13);
    		try
    		{
    		int _type = T__22;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:53:7: ( '=' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:53:9: '='
    		{
    		DebugLocation(53, 9);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__22", 13);
    		LeaveRule("T__22", 13);
    		LeaveRule_T__22();
        }
    }
    // $ANTLR end "T__22"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__23() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__23() {}

    // $ANTLR start "T__23"
    [GrammarRule("T__23")]
    private void mT__23()
    {
    	EnterRule_T__23();
    	EnterRule("T__23", 14);
    	TraceIn("T__23", 14);
    		try
    		{
    		int _type = T__23;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:54:7: ( '==' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:54:9: '=='
    		{
    		DebugLocation(54, 9);
    		Match("=="); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__23", 14);
    		LeaveRule("T__23", 14);
    		LeaveRule_T__23();
        }
    }
    // $ANTLR end "T__23"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__24() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__24() {}

    // $ANTLR start "T__24"
    [GrammarRule("T__24")]
    private void mT__24()
    {
    	EnterRule_T__24();
    	EnterRule("T__24", 15);
    	TraceIn("T__24", 15);
    		try
    		{
    		int _type = T__24;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:55:7: ( '>' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:55:9: '>'
    		{
    		DebugLocation(55, 9);
    		Match('>'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__24", 15);
    		LeaveRule("T__24", 15);
    		LeaveRule_T__24();
        }
    }
    // $ANTLR end "T__24"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__25() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__25() {}

    // $ANTLR start "T__25"
    [GrammarRule("T__25")]
    private void mT__25()
    {
    	EnterRule_T__25();
    	EnterRule("T__25", 16);
    	TraceIn("T__25", 16);
    		try
    		{
    		int _type = T__25;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:56:7: ( '>=' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:56:9: '>='
    		{
    		DebugLocation(56, 9);
    		Match(">="); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__25", 16);
    		LeaveRule("T__25", 16);
    		LeaveRule_T__25();
        }
    }
    // $ANTLR end "T__25"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__26() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__26() {}

    // $ANTLR start "T__26"
    [GrammarRule("T__26")]
    private void mT__26()
    {
    	EnterRule_T__26();
    	EnterRule("T__26", 17);
    	TraceIn("T__26", 17);
    		try
    		{
    		int _type = T__26;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:57:7: ( '@' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:57:9: '@'
    		{
    		DebugLocation(57, 9);
    		Match('@'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__26", 17);
    		LeaveRule("T__26", 17);
    		LeaveRule_T__26();
        }
    }
    // $ANTLR end "T__26"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__27() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__27() {}

    // $ANTLR start "T__27"
    [GrammarRule("T__27")]
    private void mT__27()
    {
    	EnterRule_T__27();
    	EnterRule("T__27", 18);
    	TraceIn("T__27", 18);
    		try
    		{
    		int _type = T__27;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:58:7: ( 'IsPred' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:58:9: 'IsPred'
    		{
    		DebugLocation(58, 9);
    		Match("IsPred"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__27", 18);
    		LeaveRule("T__27", 18);
    		LeaveRule_T__27();
        }
    }
    // $ANTLR end "T__27"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__28() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__28() {}

    // $ANTLR start "T__28"
    [GrammarRule("T__28")]
    private void mT__28()
    {
    	EnterRule_T__28();
    	EnterRule("T__28", 19);
    	TraceIn("T__28", 19);
    		try
    		{
    		int _type = T__28;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:59:7: ( 'IsSucc' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:59:9: 'IsSucc'
    		{
    		DebugLocation(59, 9);
    		Match("IsSucc"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__28", 19);
    		LeaveRule("T__28", 19);
    		LeaveRule_T__28();
        }
    }
    // $ANTLR end "T__28"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__29() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__29() {}

    // $ANTLR start "T__29"
    [GrammarRule("T__29")]
    private void mT__29()
    {
    	EnterRule_T__29();
    	EnterRule("T__29", 20);
    	TraceIn("T__29", 20);
    		try
    		{
    		int _type = T__29;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:60:7: ( 'P' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:60:9: 'P'
    		{
    		DebugLocation(60, 9);
    		Match('P'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__29", 20);
    		LeaveRule("T__29", 20);
    		LeaveRule_T__29();
        }
    }
    // $ANTLR end "T__29"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__30() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__30() {}

    // $ANTLR start "T__30"
    [GrammarRule("T__30")]
    private void mT__30()
    {
    	EnterRule_T__30();
    	EnterRule("T__30", 21);
    	TraceIn("T__30", 21);
    		try
    		{
    		int _type = T__30;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:61:7: ( 'S' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:61:9: 'S'
    		{
    		DebugLocation(61, 9);
    		Match('S'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__30", 21);
    		LeaveRule("T__30", 21);
    		LeaveRule_T__30();
        }
    }
    // $ANTLR end "T__30"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__31() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__31() {}

    // $ANTLR start "T__31"
    [GrammarRule("T__31")]
    private void mT__31()
    {
    	EnterRule_T__31();
    	EnterRule("T__31", 22);
    	TraceIn("T__31", 22);
    		try
    		{
    		int _type = T__31;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:62:7: ( 'U' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:62:9: 'U'
    		{
    		DebugLocation(62, 9);
    		Match('U'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__31", 22);
    		LeaveRule("T__31", 22);
    		LeaveRule_T__31();
        }
    }
    // $ANTLR end "T__31"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__32() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__32() {}

    // $ANTLR start "T__32"
    [GrammarRule("T__32")]
    private void mT__32()
    {
    	EnterRule_T__32();
    	EnterRule("T__32", 23);
    	TraceIn("T__32", 23);
    		try
    		{
    		int _type = T__32;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:63:7: ( 'V' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:63:9: 'V'
    		{
    		DebugLocation(63, 9);
    		Match('V'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__32", 23);
    		LeaveRule("T__32", 23);
    		LeaveRule_T__32();
        }
    }
    // $ANTLR end "T__32"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__33() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__33() {}

    // $ANTLR start "T__33"
    [GrammarRule("T__33")]
    private void mT__33()
    {
    	EnterRule_T__33();
    	EnterRule("T__33", 24);
    	TraceIn("T__33", 24);
    		try
    		{
    		int _type = T__33;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:64:7: ( '\\'' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:64:9: '\\''
    		{
    		DebugLocation(64, 9);
    		Match('\''); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__33", 24);
    		LeaveRule("T__33", 24);
    		LeaveRule_T__33();
        }
    }
    // $ANTLR end "T__33"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__34() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__34() {}

    // $ANTLR start "T__34"
    [GrammarRule("T__34")]
    private void mT__34()
    {
    	EnterRule_T__34();
    	EnterRule("T__34", 25);
    	TraceIn("T__34", 25);
    		try
    		{
    		int _type = T__34;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:65:7: ( 'all' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:65:9: 'all'
    		{
    		DebugLocation(65, 9);
    		Match("all"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__34", 25);
    		LeaveRule("T__34", 25);
    		LeaveRule_T__34();
        }
    }
    // $ANTLR end "T__34"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__35() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__35() {}

    // $ANTLR start "T__35"
    [GrammarRule("T__35")]
    private void mT__35()
    {
    	EnterRule_T__35();
    	EnterRule("T__35", 26);
    	TraceIn("T__35", 26);
    		try
    		{
    		int _type = T__35;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:66:7: ( 'all1' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:66:9: 'all1'
    		{
    		DebugLocation(66, 9);
    		Match("all1"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__35", 26);
    		LeaveRule("T__35", 26);
    		LeaveRule_T__35();
        }
    }
    // $ANTLR end "T__35"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__36() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__36() {}

    // $ANTLR start "T__36"
    [GrammarRule("T__36")]
    private void mT__36()
    {
    	EnterRule_T__36();
    	EnterRule("T__36", 27);
    	TraceIn("T__36", 27);
    		try
    		{
    		int _type = T__36;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:67:7: ( 'all2' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:67:9: 'all2'
    		{
    		DebugLocation(67, 9);
    		Match("all2"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__36", 27);
    		LeaveRule("T__36", 27);
    		LeaveRule_T__36();
        }
    }
    // $ANTLR end "T__36"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__37() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__37() {}

    // $ANTLR start "T__37"
    [GrammarRule("T__37")]
    private void mT__37()
    {
    	EnterRule_T__37();
    	EnterRule("T__37", 28);
    	TraceIn("T__37", 28);
    		try
    		{
    		int _type = T__37;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:68:7: ( 'allAfter' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:68:9: 'allAfter'
    		{
    		DebugLocation(68, 9);
    		Match("allAfter"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__37", 28);
    		LeaveRule("T__37", 28);
    		LeaveRule_T__37();
        }
    }
    // $ANTLR end "T__37"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__38() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__38() {}

    // $ANTLR start "T__38"
    [GrammarRule("T__38")]
    private void mT__38()
    {
    	EnterRule_T__38();
    	EnterRule("T__38", 29);
    	TraceIn("T__38", 29);
    		try
    		{
    		int _type = T__38;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:69:7: ( 'allBefore' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:69:9: 'allBefore'
    		{
    		DebugLocation(69, 9);
    		Match("allBefore"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__38", 29);
    		LeaveRule("T__38", 29);
    		LeaveRule_T__38();
        }
    }
    // $ANTLR end "T__38"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__39() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__39() {}

    // $ANTLR start "T__39"
    [GrammarRule("T__39")]
    private void mT__39()
    {
    	EnterRule_T__39();
    	EnterRule("T__39", 30);
    	TraceIn("T__39", 30);
    		try
    		{
    		int _type = T__39;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:70:7: ( 'allFrom' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:70:9: 'allFrom'
    		{
    		DebugLocation(70, 9);
    		Match("allFrom"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__39", 30);
    		LeaveRule("T__39", 30);
    		LeaveRule_T__39();
        }
    }
    // $ANTLR end "T__39"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__40() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__40() {}

    // $ANTLR start "T__40"
    [GrammarRule("T__40")]
    private void mT__40()
    {
    	EnterRule_T__40();
    	EnterRule("T__40", 31);
    	TraceIn("T__40", 31);
    		try
    		{
    		int _type = T__40;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:71:7: ( 'allPos' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:71:9: 'allPos'
    		{
    		DebugLocation(71, 9);
    		Match("allPos"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__40", 31);
    		LeaveRule("T__40", 31);
    		LeaveRule_T__40();
        }
    }
    // $ANTLR end "T__40"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__41() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__41() {}

    // $ANTLR start "T__41"
    [GrammarRule("T__41")]
    private void mT__41()
    {
    	EnterRule_T__41();
    	EnterRule("T__41", 32);
    	TraceIn("T__41", 32);
    		try
    		{
    		int _type = T__41;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:72:7: ( 'allUpto' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:72:9: 'allUpto'
    		{
    		DebugLocation(72, 9);
    		Match("allUpto"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__41", 32);
    		LeaveRule("T__41", 32);
    		LeaveRule_T__41();
        }
    }
    // $ANTLR end "T__41"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__42() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__42() {}

    // $ANTLR start "T__42"
    [GrammarRule("T__42")]
    private void mT__42()
    {
    	EnterRule_T__42();
    	EnterRule("T__42", 33);
    	TraceIn("T__42", 33);
    		try
    		{
    		int _type = T__42;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:73:7: ( 'and' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:73:9: 'and'
    		{
    		DebugLocation(73, 9);
    		Match("and"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__42", 33);
    		LeaveRule("T__42", 33);
    		LeaveRule_T__42();
        }
    }
    // $ANTLR end "T__42"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__43() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__43() {}

    // $ANTLR start "T__43"
    [GrammarRule("T__43")]
    private void mT__43()
    {
    	EnterRule_T__43();
    	EnterRule("T__43", 34);
    	TraceIn("T__43", 34);
    		try
    		{
    		int _type = T__43;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:74:7: ( 'belTo' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:74:9: 'belTo'
    		{
    		DebugLocation(74, 9);
    		Match("belTo"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__43", 34);
    		LeaveRule("T__43", 34);
    		LeaveRule_T__43();
        }
    }
    // $ANTLR end "T__43"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__44() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__44() {}

    // $ANTLR start "T__44"
    [GrammarRule("T__44")]
    private void mT__44()
    {
    	EnterRule_T__44();
    	EnterRule("T__44", 35);
    	TraceIn("T__44", 35);
    		try
    		{
    		int _type = T__44;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:75:7: ( 'contains' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:75:9: 'contains'
    		{
    		DebugLocation(75, 9);
    		Match("contains"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__44", 35);
    		LeaveRule("T__44", 35);
    		LeaveRule_T__44();
        }
    }
    // $ANTLR end "T__44"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__45() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__45() {}

    // $ANTLR start "T__45"
    [GrammarRule("T__45")]
    private void mT__45()
    {
    	EnterRule_T__45();
    	EnterRule("T__45", 36);
    	TraceIn("T__45", 36);
    		try
    		{
    		int _type = T__45;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:76:7: ( 'emptyStr' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:76:9: 'emptyStr'
    		{
    		DebugLocation(76, 9);
    		Match("emptyStr"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__45", 36);
    		LeaveRule("T__45", 36);
    		LeaveRule_T__45();
        }
    }
    // $ANTLR end "T__45"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__46() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__46() {}

    // $ANTLR start "T__46"
    [GrammarRule("T__46")]
    private void mT__46()
    {
    	EnterRule_T__46();
    	EnterRule("T__46", 37);
    	TraceIn("T__46", 37);
    		try
    		{
    		int _type = T__46;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:77:7: ( 'endsWith' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:77:9: 'endsWith'
    		{
    		DebugLocation(77, 9);
    		Match("endsWith"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__46", 37);
    		LeaveRule("T__46", 37);
    		LeaveRule_T__46();
        }
    }
    // $ANTLR end "T__46"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__47() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__47() {}

    // $ANTLR start "T__47"
    [GrammarRule("T__47")]
    private void mT__47()
    {
    	EnterRule_T__47();
    	EnterRule("T__47", 38);
    	TraceIn("T__47", 38);
    		try
    		{
    		int _type = T__47;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:78:7: ( 'ex' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:78:9: 'ex'
    		{
    		DebugLocation(78, 9);
    		Match("ex"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__47", 38);
    		LeaveRule("T__47", 38);
    		LeaveRule_T__47();
        }
    }
    // $ANTLR end "T__47"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__48() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__48() {}

    // $ANTLR start "T__48"
    [GrammarRule("T__48")]
    private void mT__48()
    {
    	EnterRule_T__48();
    	EnterRule("T__48", 39);
    	TraceIn("T__48", 39);
    		try
    		{
    		int _type = T__48;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:79:7: ( 'ex1' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:79:9: 'ex1'
    		{
    		DebugLocation(79, 9);
    		Match("ex1"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__48", 39);
    		LeaveRule("T__48", 39);
    		LeaveRule_T__48();
        }
    }
    // $ANTLR end "T__48"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__49() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__49() {}

    // $ANTLR start "T__49"
    [GrammarRule("T__49")]
    private void mT__49()
    {
    	EnterRule_T__49();
    	EnterRule("T__49", 40);
    	TraceIn("T__49", 40);
    		try
    		{
    		int _type = T__49;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:80:7: ( 'ex2' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:80:9: 'ex2'
    		{
    		DebugLocation(80, 9);
    		Match("ex2"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__49", 40);
    		LeaveRule("T__49", 40);
    		LeaveRule_T__49();
        }
    }
    // $ANTLR end "T__49"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__50() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__50() {}

    // $ANTLR start "T__50"
    [GrammarRule("T__50")]
    private void mT__50()
    {
    	EnterRule_T__50();
    	EnterRule("T__50", 41);
    	TraceIn("T__50", 41);
    		try
    		{
    		int _type = T__50;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:81:7: ( 'false' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:81:9: 'false'
    		{
    		DebugLocation(81, 9);
    		Match("false"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__50", 41);
    		LeaveRule("T__50", 41);
    		LeaveRule_T__50();
        }
    }
    // $ANTLR end "T__50"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__51() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__51() {}

    // $ANTLR start "T__51"
    [GrammarRule("T__51")]
    private void mT__51()
    {
    	EnterRule_T__51();
    	EnterRule("T__51", 42);
    	TraceIn("T__51", 42);
    		try
    		{
    		int _type = T__51;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:82:7: ( 'first' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:82:9: 'first'
    		{
    		DebugLocation(82, 9);
    		Match("first"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__51", 42);
    		LeaveRule("T__51", 42);
    		LeaveRule_T__51();
        }
    }
    // $ANTLR end "T__51"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__52() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__52() {}

    // $ANTLR start "T__52"
    [GrammarRule("T__52")]
    private void mT__52()
    {
    	EnterRule_T__52();
    	EnterRule("T__52", 43);
    	TraceIn("T__52", 43);
    		try
    		{
    		int _type = T__52;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:83:7: ( 'firstOcc' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:83:9: 'firstOcc'
    		{
    		DebugLocation(83, 9);
    		Match("firstOcc"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__52", 43);
    		LeaveRule("T__52", 43);
    		LeaveRule_T__52();
        }
    }
    // $ANTLR end "T__52"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__53() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__53() {}

    // $ANTLR start "T__53"
    [GrammarRule("T__53")]
    private void mT__53()
    {
    	EnterRule_T__53();
    	EnterRule("T__53", 44);
    	TraceIn("T__53", 44);
    		try
    		{
    		int _type = T__53;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:84:7: ( 'indOf' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:84:9: 'indOf'
    		{
    		DebugLocation(84, 9);
    		Match("indOf"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__53", 44);
    		LeaveRule("T__53", 44);
    		LeaveRule_T__53();
        }
    }
    // $ANTLR end "T__53"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__54() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__54() {}

    // $ANTLR start "T__54"
    [GrammarRule("T__54")]
    private void mT__54()
    {
    	EnterRule_T__54();
    	EnterRule("T__54", 45);
    	TraceIn("T__54", 45);
    		try
    		{
    		int _type = T__54;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:85:7: ( 'inters' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:85:9: 'inters'
    		{
    		DebugLocation(85, 9);
    		Match("inters"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__54", 45);
    		LeaveRule("T__54", 45);
    		LeaveRule_T__54();
        }
    }
    // $ANTLR end "T__54"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__55() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__55() {}

    // $ANTLR start "T__55"
    [GrammarRule("T__55")]
    private void mT__55()
    {
    	EnterRule_T__55();
    	EnterRule("T__55", 46);
    	TraceIn("T__55", 46);
    		try
    		{
    		int _type = T__55;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:86:7: ( 'isString' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:86:9: 'isString'
    		{
    		DebugLocation(86, 9);
    		Match("isString"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__55", 46);
    		LeaveRule("T__55", 46);
    		LeaveRule_T__55();
        }
    }
    // $ANTLR end "T__55"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__56() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__56() {}

    // $ANTLR start "T__56"
    [GrammarRule("T__56")]
    private void mT__56()
    {
    	EnterRule_T__56();
    	EnterRule("T__56", 47);
    	TraceIn("T__56", 47);
    		try
    		{
    		int _type = T__56;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:87:7: ( 'last' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:87:9: 'last'
    		{
    		DebugLocation(87, 9);
    		Match("last"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__56", 47);
    		LeaveRule("T__56", 47);
    		LeaveRule_T__56();
        }
    }
    // $ANTLR end "T__56"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__57() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__57() {}

    // $ANTLR start "T__57"
    [GrammarRule("T__57")]
    private void mT__57()
    {
    	EnterRule_T__57();
    	EnterRule("T__57", 48);
    	TraceIn("T__57", 48);
    		try
    		{
    		int _type = T__57;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:88:7: ( 'lastOcc' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:88:9: 'lastOcc'
    		{
    		DebugLocation(88, 9);
    		Match("lastOcc"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__57", 48);
    		LeaveRule("T__57", 48);
    		LeaveRule_T__57();
        }
    }
    // $ANTLR end "T__57"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__58() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__58() {}

    // $ANTLR start "T__58"
    [GrammarRule("T__58")]
    private void mT__58()
    {
    	EnterRule_T__58();
    	EnterRule("T__58", 49);
    	TraceIn("T__58", 49);
    		try
    		{
    		int _type = T__58;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:89:7: ( 'not' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:89:9: 'not'
    		{
    		DebugLocation(89, 9);
    		Match("not"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__58", 49);
    		LeaveRule("T__58", 49);
    		LeaveRule_T__58();
        }
    }
    // $ANTLR end "T__58"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__59() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__59() {}

    // $ANTLR start "T__59"
    [GrammarRule("T__59")]
    private void mT__59()
    {
    	EnterRule_T__59();
    	EnterRule("T__59", 50);
    	TraceIn("T__59", 50);
    		try
    		{
    		int _type = T__59;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:90:7: ( 'or' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:90:9: 'or'
    		{
    		DebugLocation(90, 9);
    		Match("or"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__59", 50);
    		LeaveRule("T__59", 50);
    		LeaveRule_T__59();
        }
    }
    // $ANTLR end "T__59"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__60() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__60() {}

    // $ANTLR start "T__60"
    [GrammarRule("T__60")]
    private void mT__60()
    {
    	EnterRule_T__60();
    	EnterRule("T__60", 51);
    	TraceIn("T__60", 51);
    		try
    		{
    		int _type = T__60;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:91:7: ( 'startsWith' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:91:9: 'startsWith'
    		{
    		DebugLocation(91, 9);
    		Match("startsWith"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__60", 51);
    		LeaveRule("T__60", 51);
    		LeaveRule_T__60();
        }
    }
    // $ANTLR end "T__60"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__61() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__61() {}

    // $ANTLR start "T__61"
    [GrammarRule("T__61")]
    private void mT__61()
    {
    	EnterRule_T__61();
    	EnterRule("T__61", 52);
    	TraceIn("T__61", 52);
    		try
    		{
    		int _type = T__61;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:92:7: ( 'true' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:92:9: 'true'
    		{
    		DebugLocation(92, 9);
    		Match("true"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__61", 52);
    		LeaveRule("T__61", 52);
    		LeaveRule_T__61();
        }
    }
    // $ANTLR end "T__61"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__62() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__62() {}

    // $ANTLR start "T__62"
    [GrammarRule("T__62")]
    private void mT__62()
    {
    	EnterRule_T__62();
    	EnterRule("T__62", 53);
    	TraceIn("T__62", 53);
    		try
    		{
    		int _type = T__62;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:93:7: ( 'union' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:93:9: 'union'
    		{
    		DebugLocation(93, 9);
    		Match("union"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__62", 53);
    		LeaveRule("T__62", 53);
    		LeaveRule_T__62();
        }
    }
    // $ANTLR end "T__62"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__63() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__63() {}

    // $ANTLR start "T__63"
    [GrammarRule("T__63")]
    private void mT__63()
    {
    	EnterRule_T__63();
    	EnterRule("T__63", 54);
    	TraceIn("T__63", 54);
    		try
    		{
    		int _type = T__63;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:94:7: ( '{' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:94:9: '{'
    		{
    		DebugLocation(94, 9);
    		Match('{'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__63", 54);
    		LeaveRule("T__63", 54);
    		LeaveRule_T__63();
        }
    }
    // $ANTLR end "T__63"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__64() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__64() {}

    // $ANTLR start "T__64"
    [GrammarRule("T__64")]
    private void mT__64()
    {
    	EnterRule_T__64();
    	EnterRule("T__64", 55);
    	TraceIn("T__64", 55);
    		try
    		{
    		int _type = T__64;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:95:7: ( '|' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:95:9: '|'
    		{
    		DebugLocation(95, 9);
    		Match('|'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__64", 55);
    		LeaveRule("T__64", 55);
    		LeaveRule_T__64();
        }
    }
    // $ANTLR end "T__64"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__65() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__65() {}

    // $ANTLR start "T__65"
    [GrammarRule("T__65")]
    private void mT__65()
    {
    	EnterRule_T__65();
    	EnterRule("T__65", 56);
    	TraceIn("T__65", 56);
    		try
    		{
    		int _type = T__65;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:96:7: ( '}' )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:96:9: '}'
    		{
    		DebugLocation(96, 9);
    		Match('}'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__65", 56);
    		LeaveRule("T__65", 56);
    		LeaveRule_T__65();
        }
    }
    // $ANTLR end "T__65"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_FOVARIABLE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_FOVARIABLE() {}

    // $ANTLR start "FOVARIABLE"
    [GrammarRule("FOVARIABLE")]
    private void mFOVARIABLE()
    {
    	EnterRule_FOVARIABLE();
    	EnterRule("FOVARIABLE", 57);
    	TraceIn("FOVARIABLE", 57);
    		try
    		{
    		int _type = FOVARIABLE;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:155:11: ( ( 'x' .. 'z' ) ( '0' .. '9' )* )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:155:13: ( 'x' .. 'z' ) ( '0' .. '9' )*
    		{
    		DebugLocation(155, 13);
    		if ((input.LA(1)>='x' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(155, 23);
    		// PDLGrammar.g:155:23: ( '0' .. '9' )*
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_1 = input.LA(1);

    			if (((LA1_1>='0' && LA1_1<='9')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch ( alt1 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// PDLGrammar.g:
    				{
    				DebugLocation(155, 23);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop1;
    			}
    		}

    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("FOVARIABLE", 57);
    		LeaveRule("FOVARIABLE", 57);
    		LeaveRule_FOVARIABLE();
        }
    }
    // $ANTLR end "FOVARIABLE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SOVARIABLE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SOVARIABLE() {}

    // $ANTLR start "SOVARIABLE"
    [GrammarRule("SOVARIABLE")]
    private void mSOVARIABLE()
    {
    	EnterRule_SOVARIABLE();
    	EnterRule("SOVARIABLE", 58);
    	TraceIn("SOVARIABLE", 58);
    		try
    		{
    		int _type = SOVARIABLE;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:156:11: ( ( 'X' .. 'Z' ) ( '0' .. '9' )* )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:156:13: ( 'X' .. 'Z' ) ( '0' .. '9' )*
    		{
    		DebugLocation(156, 13);
    		if ((input.LA(1)>='X' && input.LA(1)<='Z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(156, 23);
    		// PDLGrammar.g:156:23: ( '0' .. '9' )*
    		try { DebugEnterSubRule(2);
    		while (true)
    		{
    			int alt2=2;
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_1 = input.LA(1);

    			if (((LA2_1>='0' && LA2_1<='9')))
    			{
    				alt2 = 1;
    			}


    			} finally { DebugExitDecision(2); }
    			switch ( alt2 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// PDLGrammar.g:
    				{
    				DebugLocation(156, 23);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop2;
    			}
    		}

    		loop2:
    			;

    		} finally { DebugExitSubRule(2); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SOVARIABLE", 58);
    		LeaveRule("SOVARIABLE", 58);
    		LeaveRule_SOVARIABLE();
        }
    }
    // $ANTLR end "SOVARIABLE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CHAR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CHAR() {}

    // $ANTLR start "CHAR"
    [GrammarRule("CHAR")]
    private void mCHAR()
    {
    	EnterRule_CHAR();
    	EnterRule("CHAR", 59);
    	TraceIn("CHAR", 59);
    		try
    		{
    		int _type = CHAR;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:157:5: ( ( 'a' | 'b' ) )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:
    		{
    		DebugLocation(157, 5);
    		if ((input.LA(1)>='a' && input.LA(1)<='b'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CHAR", 59);
    		LeaveRule("CHAR", 59);
    		LeaveRule_CHAR();
        }
    }
    // $ANTLR end "CHAR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_STRING() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_STRING() {}

    // $ANTLR start "STRING"
    [GrammarRule("STRING")]
    private void mSTRING()
    {
    	EnterRule_STRING();
    	EnterRule("STRING", 60);
    	TraceIn("STRING", 60);
    		try
    		{
    		int _type = STRING;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:158:8: ( ( CHAR )+ )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:158:10: ( CHAR )+
    		{
    		DebugLocation(158, 10);
    		// PDLGrammar.g:158:10: ( CHAR )+
    		int cnt3=0;
    		try { DebugEnterSubRule(3);
    		while (true)
    		{
    			int alt3=2;
    			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    			int LA3_1 = input.LA(1);

    			if (((LA3_1>='a' && LA3_1<='b')))
    			{
    				alt3 = 1;
    			}


    			} finally { DebugExitDecision(3); }
    			switch (alt3)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// PDLGrammar.g:
    				{
    				DebugLocation(158, 10);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt3 >= 1)
    					goto loop3;

    				EarlyExitException eee3 = new EarlyExitException( 3, input );
    				DebugRecognitionException(eee3);
    				throw eee3;
    			}
    			cnt3++;
    		}
    		loop3:
    			;

    		} finally { DebugExitSubRule(3); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("STRING", 60);
    		LeaveRule("STRING", 60);
    		LeaveRule_STRING();
        }
    }
    // $ANTLR end "STRING"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INT() {}

    // $ANTLR start "INT"
    [GrammarRule("INT")]
    private void mINT()
    {
    	EnterRule_INT();
    	EnterRule("INT", 61);
    	TraceIn("INT", 61);
    		try
    		{
    		int _type = INT;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:159:4: ( ( '0' .. '9' ) )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:
    		{
    		DebugLocation(159, 4);
    		if ((input.LA(1)>='0' && input.LA(1)<='9'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INT", 61);
    		LeaveRule("INT", 61);
    		LeaveRule_INT();
        }
    }
    // $ANTLR end "INT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WS() {}

    // $ANTLR start "WS"
    [GrammarRule("WS")]
    private void mWS()
    {
    	EnterRule_WS();
    	EnterRule("WS", 62);
    	TraceIn("WS", 62);
    		try
    		{
    		int _type = WS;
    		int _channel = DefaultTokenChannel;
    		// PDLGrammar.g:161:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
    		DebugEnterAlt(1);
    		// PDLGrammar.g:161:9: ( ' ' | '\\t' | '\\r' | '\\n' )
    		{
    		DebugLocation(161, 9);
    		if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(165, 11);
    		_channel=Hidden;

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WS", 62);
    		LeaveRule("WS", 62);
    		LeaveRule_WS();
        }
    }
    // $ANTLR end "WS"

    public override void mTokens()
    {
    	// PDLGrammar.g:1:8: ( T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | FOVARIABLE | SOVARIABLE | CHAR | STRING | INT | WS )
    	int alt4=62;
    	try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    	try
    	{
    		alt4 = dfa4.Predict(input);
    	}
    	catch (NoViableAltException nvae)
    	{
    		DebugRecognitionException(nvae);
    		throw;
    	}
    	} finally { DebugExitDecision(4); }
    	switch (alt4)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// PDLGrammar.g:1:10: T__10
    		{
    		DebugLocation(1, 10);
    		mT__10(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// PDLGrammar.g:1:16: T__11
    		{
    		DebugLocation(1, 16);
    		mT__11(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// PDLGrammar.g:1:22: T__12
    		{
    		DebugLocation(1, 22);
    		mT__12(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// PDLGrammar.g:1:28: T__13
    		{
    		DebugLocation(1, 28);
    		mT__13(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// PDLGrammar.g:1:34: T__14
    		{
    		DebugLocation(1, 34);
    		mT__14(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// PDLGrammar.g:1:40: T__15
    		{
    		DebugLocation(1, 40);
    		mT__15(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// PDLGrammar.g:1:46: T__16
    		{
    		DebugLocation(1, 46);
    		mT__16(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// PDLGrammar.g:1:52: T__17
    		{
    		DebugLocation(1, 52);
    		mT__17(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// PDLGrammar.g:1:58: T__18
    		{
    		DebugLocation(1, 58);
    		mT__18(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// PDLGrammar.g:1:64: T__19
    		{
    		DebugLocation(1, 64);
    		mT__19(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// PDLGrammar.g:1:70: T__20
    		{
    		DebugLocation(1, 70);
    		mT__20(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// PDLGrammar.g:1:76: T__21
    		{
    		DebugLocation(1, 76);
    		mT__21(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// PDLGrammar.g:1:82: T__22
    		{
    		DebugLocation(1, 82);
    		mT__22(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// PDLGrammar.g:1:88: T__23
    		{
    		DebugLocation(1, 88);
    		mT__23(); 

    		}
    		break;
    	case 15:
    		DebugEnterAlt(15);
    		// PDLGrammar.g:1:94: T__24
    		{
    		DebugLocation(1, 94);
    		mT__24(); 

    		}
    		break;
    	case 16:
    		DebugEnterAlt(16);
    		// PDLGrammar.g:1:100: T__25
    		{
    		DebugLocation(1, 100);
    		mT__25(); 

    		}
    		break;
    	case 17:
    		DebugEnterAlt(17);
    		// PDLGrammar.g:1:106: T__26
    		{
    		DebugLocation(1, 106);
    		mT__26(); 

    		}
    		break;
    	case 18:
    		DebugEnterAlt(18);
    		// PDLGrammar.g:1:112: T__27
    		{
    		DebugLocation(1, 112);
    		mT__27(); 

    		}
    		break;
    	case 19:
    		DebugEnterAlt(19);
    		// PDLGrammar.g:1:118: T__28
    		{
    		DebugLocation(1, 118);
    		mT__28(); 

    		}
    		break;
    	case 20:
    		DebugEnterAlt(20);
    		// PDLGrammar.g:1:124: T__29
    		{
    		DebugLocation(1, 124);
    		mT__29(); 

    		}
    		break;
    	case 21:
    		DebugEnterAlt(21);
    		// PDLGrammar.g:1:130: T__30
    		{
    		DebugLocation(1, 130);
    		mT__30(); 

    		}
    		break;
    	case 22:
    		DebugEnterAlt(22);
    		// PDLGrammar.g:1:136: T__31
    		{
    		DebugLocation(1, 136);
    		mT__31(); 

    		}
    		break;
    	case 23:
    		DebugEnterAlt(23);
    		// PDLGrammar.g:1:142: T__32
    		{
    		DebugLocation(1, 142);
    		mT__32(); 

    		}
    		break;
    	case 24:
    		DebugEnterAlt(24);
    		// PDLGrammar.g:1:148: T__33
    		{
    		DebugLocation(1, 148);
    		mT__33(); 

    		}
    		break;
    	case 25:
    		DebugEnterAlt(25);
    		// PDLGrammar.g:1:154: T__34
    		{
    		DebugLocation(1, 154);
    		mT__34(); 

    		}
    		break;
    	case 26:
    		DebugEnterAlt(26);
    		// PDLGrammar.g:1:160: T__35
    		{
    		DebugLocation(1, 160);
    		mT__35(); 

    		}
    		break;
    	case 27:
    		DebugEnterAlt(27);
    		// PDLGrammar.g:1:166: T__36
    		{
    		DebugLocation(1, 166);
    		mT__36(); 

    		}
    		break;
    	case 28:
    		DebugEnterAlt(28);
    		// PDLGrammar.g:1:172: T__37
    		{
    		DebugLocation(1, 172);
    		mT__37(); 

    		}
    		break;
    	case 29:
    		DebugEnterAlt(29);
    		// PDLGrammar.g:1:178: T__38
    		{
    		DebugLocation(1, 178);
    		mT__38(); 

    		}
    		break;
    	case 30:
    		DebugEnterAlt(30);
    		// PDLGrammar.g:1:184: T__39
    		{
    		DebugLocation(1, 184);
    		mT__39(); 

    		}
    		break;
    	case 31:
    		DebugEnterAlt(31);
    		// PDLGrammar.g:1:190: T__40
    		{
    		DebugLocation(1, 190);
    		mT__40(); 

    		}
    		break;
    	case 32:
    		DebugEnterAlt(32);
    		// PDLGrammar.g:1:196: T__41
    		{
    		DebugLocation(1, 196);
    		mT__41(); 

    		}
    		break;
    	case 33:
    		DebugEnterAlt(33);
    		// PDLGrammar.g:1:202: T__42
    		{
    		DebugLocation(1, 202);
    		mT__42(); 

    		}
    		break;
    	case 34:
    		DebugEnterAlt(34);
    		// PDLGrammar.g:1:208: T__43
    		{
    		DebugLocation(1, 208);
    		mT__43(); 

    		}
    		break;
    	case 35:
    		DebugEnterAlt(35);
    		// PDLGrammar.g:1:214: T__44
    		{
    		DebugLocation(1, 214);
    		mT__44(); 

    		}
    		break;
    	case 36:
    		DebugEnterAlt(36);
    		// PDLGrammar.g:1:220: T__45
    		{
    		DebugLocation(1, 220);
    		mT__45(); 

    		}
    		break;
    	case 37:
    		DebugEnterAlt(37);
    		// PDLGrammar.g:1:226: T__46
    		{
    		DebugLocation(1, 226);
    		mT__46(); 

    		}
    		break;
    	case 38:
    		DebugEnterAlt(38);
    		// PDLGrammar.g:1:232: T__47
    		{
    		DebugLocation(1, 232);
    		mT__47(); 

    		}
    		break;
    	case 39:
    		DebugEnterAlt(39);
    		// PDLGrammar.g:1:238: T__48
    		{
    		DebugLocation(1, 238);
    		mT__48(); 

    		}
    		break;
    	case 40:
    		DebugEnterAlt(40);
    		// PDLGrammar.g:1:244: T__49
    		{
    		DebugLocation(1, 244);
    		mT__49(); 

    		}
    		break;
    	case 41:
    		DebugEnterAlt(41);
    		// PDLGrammar.g:1:250: T__50
    		{
    		DebugLocation(1, 250);
    		mT__50(); 

    		}
    		break;
    	case 42:
    		DebugEnterAlt(42);
    		// PDLGrammar.g:1:256: T__51
    		{
    		DebugLocation(1, 256);
    		mT__51(); 

    		}
    		break;
    	case 43:
    		DebugEnterAlt(43);
    		// PDLGrammar.g:1:262: T__52
    		{
    		DebugLocation(1, 262);
    		mT__52(); 

    		}
    		break;
    	case 44:
    		DebugEnterAlt(44);
    		// PDLGrammar.g:1:268: T__53
    		{
    		DebugLocation(1, 268);
    		mT__53(); 

    		}
    		break;
    	case 45:
    		DebugEnterAlt(45);
    		// PDLGrammar.g:1:274: T__54
    		{
    		DebugLocation(1, 274);
    		mT__54(); 

    		}
    		break;
    	case 46:
    		DebugEnterAlt(46);
    		// PDLGrammar.g:1:280: T__55
    		{
    		DebugLocation(1, 280);
    		mT__55(); 

    		}
    		break;
    	case 47:
    		DebugEnterAlt(47);
    		// PDLGrammar.g:1:286: T__56
    		{
    		DebugLocation(1, 286);
    		mT__56(); 

    		}
    		break;
    	case 48:
    		DebugEnterAlt(48);
    		// PDLGrammar.g:1:292: T__57
    		{
    		DebugLocation(1, 292);
    		mT__57(); 

    		}
    		break;
    	case 49:
    		DebugEnterAlt(49);
    		// PDLGrammar.g:1:298: T__58
    		{
    		DebugLocation(1, 298);
    		mT__58(); 

    		}
    		break;
    	case 50:
    		DebugEnterAlt(50);
    		// PDLGrammar.g:1:304: T__59
    		{
    		DebugLocation(1, 304);
    		mT__59(); 

    		}
    		break;
    	case 51:
    		DebugEnterAlt(51);
    		// PDLGrammar.g:1:310: T__60
    		{
    		DebugLocation(1, 310);
    		mT__60(); 

    		}
    		break;
    	case 52:
    		DebugEnterAlt(52);
    		// PDLGrammar.g:1:316: T__61
    		{
    		DebugLocation(1, 316);
    		mT__61(); 

    		}
    		break;
    	case 53:
    		DebugEnterAlt(53);
    		// PDLGrammar.g:1:322: T__62
    		{
    		DebugLocation(1, 322);
    		mT__62(); 

    		}
    		break;
    	case 54:
    		DebugEnterAlt(54);
    		// PDLGrammar.g:1:328: T__63
    		{
    		DebugLocation(1, 328);
    		mT__63(); 

    		}
    		break;
    	case 55:
    		DebugEnterAlt(55);
    		// PDLGrammar.g:1:334: T__64
    		{
    		DebugLocation(1, 334);
    		mT__64(); 

    		}
    		break;
    	case 56:
    		DebugEnterAlt(56);
    		// PDLGrammar.g:1:340: T__65
    		{
    		DebugLocation(1, 340);
    		mT__65(); 

    		}
    		break;
    	case 57:
    		DebugEnterAlt(57);
    		// PDLGrammar.g:1:346: FOVARIABLE
    		{
    		DebugLocation(1, 346);
    		mFOVARIABLE(); 

    		}
    		break;
    	case 58:
    		DebugEnterAlt(58);
    		// PDLGrammar.g:1:357: SOVARIABLE
    		{
    		DebugLocation(1, 357);
    		mSOVARIABLE(); 

    		}
    		break;
    	case 59:
    		DebugEnterAlt(59);
    		// PDLGrammar.g:1:368: CHAR
    		{
    		DebugLocation(1, 368);
    		mCHAR(); 

    		}
    		break;
    	case 60:
    		DebugEnterAlt(60);
    		// PDLGrammar.g:1:373: STRING
    		{
    		DebugLocation(1, 373);
    		mSTRING(); 

    		}
    		break;
    	case 61:
    		DebugEnterAlt(61);
    		// PDLGrammar.g:1:380: INT
    		{
    		DebugLocation(1, 380);
    		mINT(); 

    		}
    		break;
    	case 62:
    		DebugEnterAlt(62);
    		// PDLGrammar.g:1:384: WS
    		{
    		DebugLocation(1, 384);
    		mWS(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA4 dfa4;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4(this);
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x9\xFFFF\x1\x2A\x1\x2C\x1\x2E\x7\xFFFF\x2\x32\x22\xFFFF\x1\x42\x7\xFFFF"+
			"\x1\x4E\x10\xFFFF\x1\x53\x1\x55\x4\xFFFF";
		private const string DFA4_eofS =
			"\x56\xFFFF";
		private const string DFA4_minS =
			"\x1\x9\x6\xFFFF\x1\x2D\x1\xFFFF\x1\x2D\x2\x3D\x1\xFFFF\x1\x73\x5\xFFFF"+
			"\x2\x61\x1\xFFFF\x1\x6D\x1\x61\x1\x6E\x1\x61\x15\xFFFF\x1\x50\x1\x6C"+
			"\x6\xFFFF\x1\x31\x1\xFFFF\x1\x72\x1\x64\x1\xFFFF\x1\x73\x2\xFFFF\x1\x31"+
			"\x3\xFFFF\x1\x73\x2\xFFFF\x1\x74\x8\xFFFF\x1\x74\x2\x4F\x4\xFFFF";
		private const string DFA4_maxS =
			"\x1\x7D\x6\xFFFF\x1\x3E\x1\xFFFF\x3\x3D\x1\xFFFF\x1\x73\x5\xFFFF\x1\x6E"+
			"\x1\x65\x1\xFFFF\x1\x78\x1\x69\x1\x73\x1\x61\x15\xFFFF\x1\x53\x1\x6C"+
			"\x6\xFFFF\x1\x32\x1\xFFFF\x1\x72\x1\x74\x1\xFFFF\x1\x73\x2\xFFFF\x1\x55"+
			"\x3\xFFFF\x1\x73\x2\xFFFF\x1\x74\x8\xFFFF\x1\x74\x2\x4F\x4\xFFFF";
		private const string DFA4_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\xFFFF\x1\x9\x3\xFFFF"+
			"\x1\x11\x1\xFFFF\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x2\xFFFF\x1\x23\x4"+
			"\xFFFF\x1\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39"+
			"\x1\x3A\x1\x3D\x1\x3E\x1\x7\x1\x8\x1\xB\x1\xC\x1\xA\x1\xE\x1\xD\x1\x10"+
			"\x1\xF\x2\xFFFF\x1\x21\x1\x3B\x1\x3C\x1\x22\x1\x24\x1\x25\x1\xFFFF\x1"+
			"\x29\x2\xFFFF\x1\x2E\x1\xFFFF\x1\x12\x1\x13\x1\xFFFF\x1\x27\x1\x28\x1"+
			"\x26\x1\xFFFF\x1\x2C\x1\x2D\x1\xFFFF\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x19\x3\xFFFF\x1\x30\x1\x2F\x1\x2B\x1\x2A";
		private const string DFA4_specialS =
			"\x56\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x2\x25\x2\xFFFF\x1\x25\x12\xFFFF\x1\x25\x1\x1\x3\xFFFF\x1\x2\x1\x3"+
				"\x1\x12\x1\x4\x1\x5\x2\xFFFF\x1\x6\x1\x7\x1\x8\x1\xFFFF\xA\x24\x2\xFFFF"+
				"\x1\x9\x1\xA\x1\xB\x1\xFFFF\x1\xC\x8\xFFFF\x1\xD\x6\xFFFF\x1\xE\x2\xFFFF"+
				"\x1\xF\x1\xFFFF\x1\x10\x1\x11\x1\xFFFF\x3\x23\x6\xFFFF\x1\x13\x1\x14"+
				"\x1\x15\x1\xFFFF\x1\x16\x1\x17\x2\xFFFF\x1\x18\x2\xFFFF\x1\x19\x1\xFFFF"+
				"\x1\x1A\x1\x1B\x3\xFFFF\x1\x1C\x1\x1D\x1\x1E\x2\xFFFF\x3\x22\x1\x1F"+
				"\x1\x20\x1\x21",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x26\x10\xFFFF\x1\x27",
				"",
				"\x1\x28\xF\xFFFF\x1\x29",
				"\x1\x2B",
				"\x1\x2D",
				"",
				"\x1\x2F",
				"",
				"",
				"",
				"",
				"",
				"\x2\x33\x9\xFFFF\x1\x30\x1\xFFFF\x1\x31",
				"\x2\x33\x2\xFFFF\x1\x34",
				"",
				"\x1\x35\x1\x36\x9\xFFFF\x1\x37",
				"\x1\x38\x7\xFFFF\x1\x39",
				"\x1\x3A\x4\xFFFF\x1\x3B",
				"\x1\x3C",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x3D\x2\xFFFF\x1\x3E",
				"\x1\x3F",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x40\x1\x41",
				"",
				"\x1\x43",
				"\x1\x44\xF\xFFFF\x1\x45",
				"",
				"\x1\x46",
				"",
				"",
				"\x1\x47\x1\x48\xE\xFFFF\x1\x49\x1\x4A\x3\xFFFF\x1\x4B\x9\xFFFF\x1\x4C"+
				"\x4\xFFFF\x1\x4D",
				"",
				"",
				"",
				"\x1\x4F",
				"",
				"",
				"\x1\x50",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x51",
				"\x1\x52",
				"\x1\x54",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | FOVARIABLE | SOVARIABLE | CHAR | STRING | INT | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  AutomataPDL.Parse 
