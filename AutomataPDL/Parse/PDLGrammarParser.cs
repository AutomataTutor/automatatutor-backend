//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 PDLGrammar.g 2013-10-18 11:23:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591

using System.Text;

using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  AutomataPDL.Parse 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class PDLGrammarParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHAR", "FOVARIABLE", "INT", "SOVARIABLE", "STRING", "WS", "'!'", "'%'", "'&'", "'('", "')'", "','", "'-->'", "'->'", "'.'", "'<'", "'<->'", "'<='", "'='", "'=='", "'>'", "'>='", "'@'", "'IsPred'", "'IsSucc'", "'P'", "'S'", "'U'", "'V'", "'\\''", "'all'", "'all1'", "'all2'", "'allAfter'", "'allBefore'", "'allFrom'", "'allPos'", "'allUpto'", "'and'", "'belTo'", "'contains'", "'emptyStr'", "'endsWith'", "'ex'", "'ex1'", "'ex2'", "'false'", "'first'", "'firstOcc'", "'indOf'", "'inters'", "'isString'", "'last'", "'lastOcc'", "'not'", "'or'", "'startsWith'", "'true'", "'union'", "'{'", "'|'", "'}'"
	};
	public const int EOF=-1;
	public const int CHAR=4;
	public const int FOVARIABLE=5;
	public const int INT=6;
	public const int SOVARIABLE=7;
	public const int STRING=8;
	public const int WS=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;

	#if ANTLR_DEBUG
	private static readonly bool[] decisionCanBacktrack =
		new bool[]
		{
			false, // invalid decision
			true, false, true
		};
	#else
	private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public PDLGrammarParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public PDLGrammarParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return PDLGrammarParser.tokenNames; } }
	public override string GrammarFileName { get { return "PDLGrammar.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}
	// $ANTLR start "parse"
	// PDLGrammar.g:79:8: public parse returns [PDLPred phi] : phi1= pred EOF ;
	[GrammarRule("parse")]
	public PDLPred parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    PDLPred phi = default(PDLPred);


	    PDLPred phi1 = default(PDLPred);

		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(79, 0);
		try
		{
			// PDLGrammar.g:79:35: (phi1= pred EOF )
			DebugEnterAlt(1);
			// PDLGrammar.g:80:2: phi1= pred EOF
			{
			DebugLocation(80, 6);
			PushFollow(Follow._pred_in_parse80);
			phi1=pred();
			PopFollow();
			if (state.failed) return phi;
			DebugLocation(80, 12);
			Match(input,EOF,Follow._EOF_in_parse82); if (state.failed) return phi;
			DebugLocation(80, 16);
			if (state.backtracking == 0)
			{
				phi=phi1;
			}

			}

		}

		    catch (RecognitionException re){
		        if(re is NoViableAltException)
		       {
		            var e = re as NoViableAltException;
		                StringBuilder msg = new StringBuilder();
		                msg.AppendFormat("Position {0}: bad input after '{1}'", e.CharPositionInLine, e.Token!=null? e.Token.Text: ((char)e.Character).ToString());
		                throw new Parse.PDLParseException(msg.ToString());
		       }
		       else{
		            if (re is MismatchedTokenException)
		            {
		            	var e = re as MismatchedTokenException;
		                StringBuilder msg = new StringBuilder();
		                msg.AppendFormat("Position {0}: unexpected input '{1}', expecting {2}", e.CharPositionInLine, e.Token!=null? e.Token.Text: ((char)e.Character).ToString(),
		                    e.TokenNames != null ? e.TokenNames[e.Expecting] : ((char)e.Expecting).ToString());
		                throw new Parse.PDLParseException(msg.ToString());
		            }
		            else
		            if(re is EarlyExitException)
		            {
		            	var e = re as EarlyExitException;
		                StringBuilder msg = new StringBuilder();
		                msg.AppendFormat("Position {0}: something missing at input '{1}'", e.CharPositionInLine, e.Token.Text);
		                throw new Parse.PDLParseException(msg.ToString());
		            }
		            else
		                throw new PDLParseException(re.ToString());
		       }
		    }

		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(81, 0);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return phi;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_pred() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_pred() {}
	// $ANTLR start "pred"
	// PDLGrammar.g:86:1: pred returns [PDLPred phi] : (a= CHAR '@' p1= position |a= CHAR '@' s1= set |p1= position 'belTo' s1= set |p1= position ( '=' | '==' ) p2= position |p1= position '<=' p2= position |p1= position '<' p2= position |p1= position '>' p2= position |p1= position '>=' p2= position | 'IsSucc' '(' p1= position ',' p2= position ')' | 'IsPred' '(' p1= position ',' p2= position ')' | '|' s1= set '|' '%' n= INT ( '=' | '==' ) m= INT | '|' s1= set '|' '%' n= INT '<=' m= INT | '|' s1= set '|' '%' n= INT '<' m= INT | '|' s1= set '|' '%' n= INT '>' m= INT | '|' s1= set '|' '%' n= INT '>=' m= INT | '|' s1= set '|' ( '=' | '==' ) m= INT | '|' s1= set '|' '<=' m= INT | '|' s1= set '|' '<' m= INT | '|' s1= set '|' '>' m= INT | '|' s1= set '|' '>=' m= INT | ( 'all1' | 'all' ) x= FOVARIABLE '.' phi1= pred | ( 'ex1' | 'ex' ) x= FOVARIABLE '.' phi1= pred | 'all2' x= SOVARIABLE '.' phi1= pred | 'ex2' x= SOVARIABLE '.' phi1= pred | '(' phi1= pred ( '&' | 'and' ) phi2= pred ')' | '(' phi1= pred ( 'V' | '|' | 'or' ) phi2= pred ')' | '(' phi1= pred ( '->' | '-->' ) phi2= pred ')' | '(' phi1= pred '<->' phi2= pred ')' | ( '!' | 'not' ) phi1= pred | 'true' | 'false' | 'startsWith' '\\'' s= ( STRING | CHAR ) '\\'' | 'endsWith' '\\'' s= ( STRING | CHAR ) '\\'' | 'isString' '\\'' s= ( STRING | CHAR ) '\\'' | 'contains' '\\'' s= ( STRING | CHAR ) '\\'' | 'emptyStr' | '(' phi1= pred ')' );
	[GrammarRule("pred")]
	private PDLPred pred()
	{
		EnterRule_pred();
		EnterRule("pred", 2);
		TraceIn("pred", 2);
	    PDLPred phi = default(PDLPred);


	    IToken a = default(IToken);
	    IToken n = default(IToken);
	    IToken m = default(IToken);
	    IToken x = default(IToken);
	    IToken s = default(IToken);
	    PDLPos p1 = default(PDLPos);
	    PDLSet s1 = default(PDLSet);
	    PDLPos p2 = default(PDLPos);
	    PDLPred phi1 = default(PDLPred);
	    PDLPred phi2 = default(PDLPred);

		try { DebugEnterRule(GrammarFileName, "pred");
		DebugLocation(86, 2);
		try
		{
			// PDLGrammar.g:87:3: (a= CHAR '@' p1= position |a= CHAR '@' s1= set |p1= position 'belTo' s1= set |p1= position ( '=' | '==' ) p2= position |p1= position '<=' p2= position |p1= position '<' p2= position |p1= position '>' p2= position |p1= position '>=' p2= position | 'IsSucc' '(' p1= position ',' p2= position ')' | 'IsPred' '(' p1= position ',' p2= position ')' | '|' s1= set '|' '%' n= INT ( '=' | '==' ) m= INT | '|' s1= set '|' '%' n= INT '<=' m= INT | '|' s1= set '|' '%' n= INT '<' m= INT | '|' s1= set '|' '%' n= INT '>' m= INT | '|' s1= set '|' '%' n= INT '>=' m= INT | '|' s1= set '|' ( '=' | '==' ) m= INT | '|' s1= set '|' '<=' m= INT | '|' s1= set '|' '<' m= INT | '|' s1= set '|' '>' m= INT | '|' s1= set '|' '>=' m= INT | ( 'all1' | 'all' ) x= FOVARIABLE '.' phi1= pred | ( 'ex1' | 'ex' ) x= FOVARIABLE '.' phi1= pred | 'all2' x= SOVARIABLE '.' phi1= pred | 'ex2' x= SOVARIABLE '.' phi1= pred | '(' phi1= pred ( '&' | 'and' ) phi2= pred ')' | '(' phi1= pred ( 'V' | '|' | 'or' ) phi2= pred ')' | '(' phi1= pred ( '->' | '-->' ) phi2= pred ')' | '(' phi1= pred '<->' phi2= pred ')' | ( '!' | 'not' ) phi1= pred | 'true' | 'false' | 'startsWith' '\\'' s= ( STRING | CHAR ) '\\'' | 'endsWith' '\\'' s= ( STRING | CHAR ) '\\'' | 'isString' '\\'' s= ( STRING | CHAR ) '\\'' | 'contains' '\\'' s= ( STRING | CHAR ) '\\'' | 'emptyStr' | '(' phi1= pred ')' )
			int alt1=37;
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			switch (input.LA(1))
			{
			case CHAR:
				{
				int LA1_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_PDLGrammar_fragment)))
				{
					alt1 = 1;
				}
				else if ((EvaluatePredicate(synpred2_PDLGrammar_fragment)))
				{
					alt1 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					NoViableAltException nvae = new NoViableAltException("", 1, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case FOVARIABLE:
				{
				int LA1_2 = input.LA(2);

				if ((EvaluatePredicate(synpred3_PDLGrammar_fragment)))
				{
					alt1 = 3;
				}
				else if ((EvaluatePredicate(synpred5_PDLGrammar_fragment)))
				{
					alt1 = 4;
				}
				else if ((EvaluatePredicate(synpred6_PDLGrammar_fragment)))
				{
					alt1 = 5;
				}
				else if ((EvaluatePredicate(synpred7_PDLGrammar_fragment)))
				{
					alt1 = 6;
				}
				else if ((EvaluatePredicate(synpred8_PDLGrammar_fragment)))
				{
					alt1 = 7;
				}
				else if ((EvaluatePredicate(synpred9_PDLGrammar_fragment)))
				{
					alt1 = 8;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					NoViableAltException nvae = new NoViableAltException("", 1, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case 51:
				{
				int LA1_2 = input.LA(2);

				if ((EvaluatePredicate(synpred3_PDLGrammar_fragment)))
				{
					alt1 = 3;
				}
				else if ((EvaluatePredicate(synpred5_PDLGrammar_fragment)))
				{
					alt1 = 4;
				}
				else if ((EvaluatePredicate(synpred6_PDLGrammar_fragment)))
				{
					alt1 = 5;
				}
				else if ((EvaluatePredicate(synpred7_PDLGrammar_fragment)))
				{
					alt1 = 6;
				}
				else if ((EvaluatePredicate(synpred8_PDLGrammar_fragment)))
				{
					alt1 = 7;
				}
				else if ((EvaluatePredicate(synpred9_PDLGrammar_fragment)))
				{
					alt1 = 8;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					NoViableAltException nvae = new NoViableAltException("", 1, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case 56:
				{
				int LA1_2 = input.LA(2);

				if ((EvaluatePredicate(synpred3_PDLGrammar_fragment)))
				{
					alt1 = 3;
				}
				else if ((EvaluatePredicate(synpred5_PDLGrammar_fragment)))
				{
					alt1 = 4;
				}
				else if ((EvaluatePredicate(synpred6_PDLGrammar_fragment)))
				{
					alt1 = 5;
				}
				else if ((EvaluatePredicate(synpred7_PDLGrammar_fragment)))
				{
					alt1 = 6;
				}
				else if ((EvaluatePredicate(synpred8_PDLGrammar_fragment)))
				{
					alt1 = 7;
				}
				else if ((EvaluatePredicate(synpred9_PDLGrammar_fragment)))
				{
					alt1 = 8;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					NoViableAltException nvae = new NoViableAltException("", 1, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case 30:
				{
				int LA1_2 = input.LA(2);

				if ((EvaluatePredicate(synpred3_PDLGrammar_fragment)))
				{
					alt1 = 3;
				}
				else if ((EvaluatePredicate(synpred5_PDLGrammar_fragment)))
				{
					alt1 = 4;
				}
				else if ((EvaluatePredicate(synpred6_PDLGrammar_fragment)))
				{
					alt1 = 5;
				}
				else if ((EvaluatePredicate(synpred7_PDLGrammar_fragment)))
				{
					alt1 = 6;
				}
				else if ((EvaluatePredicate(synpred8_PDLGrammar_fragment)))
				{
					alt1 = 7;
				}
				else if ((EvaluatePredicate(synpred9_PDLGrammar_fragment)))
				{
					alt1 = 8;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					NoViableAltException nvae = new NoViableAltException("", 1, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case 29:
				{
				int LA1_2 = input.LA(2);

				if ((EvaluatePredicate(synpred3_PDLGrammar_fragment)))
				{
					alt1 = 3;
				}
				else if ((EvaluatePredicate(synpred5_PDLGrammar_fragment)))
				{
					alt1 = 4;
				}
				else if ((EvaluatePredicate(synpred6_PDLGrammar_fragment)))
				{
					alt1 = 5;
				}
				else if ((EvaluatePredicate(synpred7_PDLGrammar_fragment)))
				{
					alt1 = 6;
				}
				else if ((EvaluatePredicate(synpred8_PDLGrammar_fragment)))
				{
					alt1 = 7;
				}
				else if ((EvaluatePredicate(synpred9_PDLGrammar_fragment)))
				{
					alt1 = 8;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					NoViableAltException nvae = new NoViableAltException("", 1, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case 52:
				{
				int LA1_2 = input.LA(2);

				if ((EvaluatePredicate(synpred3_PDLGrammar_fragment)))
				{
					alt1 = 3;
				}
				else if ((EvaluatePredicate(synpred5_PDLGrammar_fragment)))
				{
					alt1 = 4;
				}
				else if ((EvaluatePredicate(synpred6_PDLGrammar_fragment)))
				{
					alt1 = 5;
				}
				else if ((EvaluatePredicate(synpred7_PDLGrammar_fragment)))
				{
					alt1 = 6;
				}
				else if ((EvaluatePredicate(synpred8_PDLGrammar_fragment)))
				{
					alt1 = 7;
				}
				else if ((EvaluatePredicate(synpred9_PDLGrammar_fragment)))
				{
					alt1 = 8;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					NoViableAltException nvae = new NoViableAltException("", 1, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case 57:
				{
				int LA1_2 = input.LA(2);

				if ((EvaluatePredicate(synpred3_PDLGrammar_fragment)))
				{
					alt1 = 3;
				}
				else if ((EvaluatePredicate(synpred5_PDLGrammar_fragment)))
				{
					alt1 = 4;
				}
				else if ((EvaluatePredicate(synpred6_PDLGrammar_fragment)))
				{
					alt1 = 5;
				}
				else if ((EvaluatePredicate(synpred7_PDLGrammar_fragment)))
				{
					alt1 = 6;
				}
				else if ((EvaluatePredicate(synpred8_PDLGrammar_fragment)))
				{
					alt1 = 7;
				}
				else if ((EvaluatePredicate(synpred9_PDLGrammar_fragment)))
				{
					alt1 = 8;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					NoViableAltException nvae = new NoViableAltException("", 1, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case 13:
				{
				int LA1_2 = input.LA(2);

				if ((EvaluatePredicate(synpred3_PDLGrammar_fragment)))
				{
					alt1 = 3;
				}
				else if ((EvaluatePredicate(synpred5_PDLGrammar_fragment)))
				{
					alt1 = 4;
				}
				else if ((EvaluatePredicate(synpred6_PDLGrammar_fragment)))
				{
					alt1 = 5;
				}
				else if ((EvaluatePredicate(synpred7_PDLGrammar_fragment)))
				{
					alt1 = 6;
				}
				else if ((EvaluatePredicate(synpred8_PDLGrammar_fragment)))
				{
					alt1 = 7;
				}
				else if ((EvaluatePredicate(synpred9_PDLGrammar_fragment)))
				{
					alt1 = 8;
				}
				else if ((EvaluatePredicate(synpred31_PDLGrammar_fragment)))
				{
					alt1 = 25;
				}
				else if ((EvaluatePredicate(synpred34_PDLGrammar_fragment)))
				{
					alt1 = 26;
				}
				else if ((EvaluatePredicate(synpred36_PDLGrammar_fragment)))
				{
					alt1 = 27;
				}
				else if ((EvaluatePredicate(synpred37_PDLGrammar_fragment)))
				{
					alt1 = 28;
				}
				else if ((true))
				{
					alt1 = 37;
				}

				}
				break;
			case 28:
				{
				alt1 = 9;
				}
				break;
			case 27:
				{
				alt1 = 10;
				}
				break;
			case 64:
				{
				int LA1_2 = input.LA(2);

				if ((EvaluatePredicate(synpred13_PDLGrammar_fragment)))
				{
					alt1 = 11;
				}
				else if ((EvaluatePredicate(synpred14_PDLGrammar_fragment)))
				{
					alt1 = 12;
				}
				else if ((EvaluatePredicate(synpred15_PDLGrammar_fragment)))
				{
					alt1 = 13;
				}
				else if ((EvaluatePredicate(synpred16_PDLGrammar_fragment)))
				{
					alt1 = 14;
				}
				else if ((EvaluatePredicate(synpred17_PDLGrammar_fragment)))
				{
					alt1 = 15;
				}
				else if ((EvaluatePredicate(synpred19_PDLGrammar_fragment)))
				{
					alt1 = 16;
				}
				else if ((EvaluatePredicate(synpred20_PDLGrammar_fragment)))
				{
					alt1 = 17;
				}
				else if ((EvaluatePredicate(synpred21_PDLGrammar_fragment)))
				{
					alt1 = 18;
				}
				else if ((EvaluatePredicate(synpred22_PDLGrammar_fragment)))
				{
					alt1 = 19;
				}
				else if ((EvaluatePredicate(synpred23_PDLGrammar_fragment)))
				{
					alt1 = 20;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					NoViableAltException nvae = new NoViableAltException("", 1, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case 34:
			case 35:
				{
				alt1 = 21;
				}
				break;
			case 47:
			case 48:
				{
				alt1 = 22;
				}
				break;
			case 36:
				{
				alt1 = 23;
				}
				break;
			case 49:
				{
				alt1 = 24;
				}
				break;
			case 10:
			case 58:
				{
				alt1 = 29;
				}
				break;
			case 61:
				{
				alt1 = 30;
				}
				break;
			case 50:
				{
				alt1 = 31;
				}
				break;
			case 60:
				{
				alt1 = 32;
				}
				break;
			case 46:
				{
				alt1 = 33;
				}
				break;
			case 55:
				{
				alt1 = 34;
				}
				break;
			case 44:
				{
				alt1 = 35;
				}
				break;
			case 45:
				{
				alt1 = 36;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// PDLGrammar.g:87:6: a= CHAR '@' p1= position
				{
				DebugLocation(87, 7);
				a=(IToken)Match(input,CHAR,Follow._CHAR_in_pred105); if (state.failed) return phi;
				DebugLocation(87, 13);
				Match(input,26,Follow._26_in_pred107); if (state.failed) return phi;
				DebugLocation(87, 19);
				PushFollow(Follow._position_in_pred111);
				p1=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(87, 29);
				if (state.backtracking == 0)
				{
					phi = new PDLAtPos(a.Text[0],p1);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// PDLGrammar.g:88:6: a= CHAR '@' s1= set
				{
				DebugLocation(88, 7);
				a=(IToken)Match(input,CHAR,Follow._CHAR_in_pred122); if (state.failed) return phi;
				DebugLocation(88, 13);
				Match(input,26,Follow._26_in_pred124); if (state.failed) return phi;
				DebugLocation(88, 19);
				PushFollow(Follow._set_in_pred128);
				s1=set();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(88, 24);
				if (state.backtracking == 0)
				{
					phi = new PDLAtSet(a.Text[0],s1);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// PDLGrammar.g:89:7: p1= position 'belTo' s1= set
				{
				DebugLocation(89, 9);
				PushFollow(Follow._position_in_pred140);
				p1=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(89, 19);
				Match(input,43,Follow._43_in_pred142); if (state.failed) return phi;
				DebugLocation(89, 29);
				PushFollow(Follow._set_in_pred146);
				s1=set();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(89, 34);
				if (state.backtracking == 0)
				{
					phi = new PDLBelongs(p1,s1);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// PDLGrammar.g:90:7: p1= position ( '=' | '==' ) p2= position
				{
				DebugLocation(90, 9);
				PushFollow(Follow._position_in_pred158);
				p1=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(90, 19);
				if ((input.LA(1)>=22 && input.LA(1)<=23))
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(90, 33);
				PushFollow(Follow._position_in_pred169);
				p2=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(90, 43);
				if (state.backtracking == 0)
				{
					phi = new PDLPosEq(p1,p2);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// PDLGrammar.g:91:7: p1= position '<=' p2= position
				{
				DebugLocation(91, 9);
				PushFollow(Follow._position_in_pred181);
				p1=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(91, 19);
				Match(input,21,Follow._21_in_pred183); if (state.failed) return phi;
				DebugLocation(91, 26);
				PushFollow(Follow._position_in_pred187);
				p2=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(91, 36);
				if (state.backtracking == 0)
				{
					phi = new PDLPosLeq(p1,p2);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// PDLGrammar.g:92:7: p1= position '<' p2= position
				{
				DebugLocation(92, 9);
				PushFollow(Follow._position_in_pred199);
				p1=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(92, 19);
				Match(input,19,Follow._19_in_pred201); if (state.failed) return phi;
				DebugLocation(92, 25);
				PushFollow(Follow._position_in_pred205);
				p2=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(92, 35);
				if (state.backtracking == 0)
				{
					phi = new PDLPosLe(p1,p2);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// PDLGrammar.g:93:7: p1= position '>' p2= position
				{
				DebugLocation(93, 9);
				PushFollow(Follow._position_in_pred217);
				p1=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(93, 19);
				Match(input,24,Follow._24_in_pred219); if (state.failed) return phi;
				DebugLocation(93, 25);
				PushFollow(Follow._position_in_pred223);
				p2=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(93, 35);
				if (state.backtracking == 0)
				{
					phi = new PDLPosGe(p1,p2);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// PDLGrammar.g:94:7: p1= position '>=' p2= position
				{
				DebugLocation(94, 9);
				PushFollow(Follow._position_in_pred243);
				p1=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(94, 19);
				Match(input,25,Follow._25_in_pred245); if (state.failed) return phi;
				DebugLocation(94, 26);
				PushFollow(Follow._position_in_pred249);
				p2=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(94, 36);
				if (state.backtracking == 0)
				{
					phi = new PDLPosGeq(p1,p2);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// PDLGrammar.g:95:7: 'IsSucc' '(' p1= position ',' p2= position ')'
				{
				DebugLocation(95, 7);
				Match(input,28,Follow._28_in_pred271); if (state.failed) return phi;
				DebugLocation(95, 16);
				Match(input,13,Follow._13_in_pred273); if (state.failed) return phi;
				DebugLocation(95, 22);
				PushFollow(Follow._position_in_pred277);
				p1=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(95, 32);
				Match(input,15,Follow._15_in_pred279); if (state.failed) return phi;
				DebugLocation(95, 38);
				PushFollow(Follow._position_in_pred283);
				p2=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(95, 48);
				Match(input,14,Follow._14_in_pred285); if (state.failed) return phi;
				DebugLocation(95, 52);
				if (state.backtracking == 0)
				{
					phi = new PDLIsSuccessor(p1,p2);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// PDLGrammar.g:96:7: 'IsPred' '(' p1= position ',' p2= position ')'
				{
				DebugLocation(96, 7);
				Match(input,27,Follow._27_in_pred307); if (state.failed) return phi;
				DebugLocation(96, 16);
				Match(input,13,Follow._13_in_pred309); if (state.failed) return phi;
				DebugLocation(96, 22);
				PushFollow(Follow._position_in_pred313);
				p1=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(96, 32);
				Match(input,15,Follow._15_in_pred315); if (state.failed) return phi;
				DebugLocation(96, 38);
				PushFollow(Follow._position_in_pred319);
				p2=position();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(96, 48);
				Match(input,14,Follow._14_in_pred321); if (state.failed) return phi;
				DebugLocation(96, 52);
				if (state.backtracking == 0)
				{
					phi = new PDLIsPredecessor(p1,p2);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// PDLGrammar.g:97:7: '|' s1= set '|' '%' n= INT ( '=' | '==' ) m= INT
				{
				DebugLocation(97, 7);
				Match(input,64,Follow._64_in_pred351); if (state.failed) return phi;
				DebugLocation(97, 13);
				PushFollow(Follow._set_in_pred355);
				s1=set();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(97, 18);
				Match(input,64,Follow._64_in_pred357); if (state.failed) return phi;
				DebugLocation(97, 22);
				Match(input,11,Follow._11_in_pred359); if (state.failed) return phi;
				DebugLocation(97, 27);
				n=(IToken)Match(input,INT,Follow._INT_in_pred363); if (state.failed) return phi;
				DebugLocation(97, 32);
				if ((input.LA(1)>=22 && input.LA(1)<=23))
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(97, 45);
				m=(IToken)Match(input,INT,Follow._INT_in_pred374); if (state.failed) return phi;
				DebugLocation(97, 50);
				if (state.backtracking == 0)
				{
					phi = new PDLModSetEq(s1,int.Parse(n.Text),int.Parse(m.Text));
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// PDLGrammar.g:98:7: '|' s1= set '|' '%' n= INT '<=' m= INT
				{
				DebugLocation(98, 7);
				Match(input,64,Follow._64_in_pred396); if (state.failed) return phi;
				DebugLocation(98, 13);
				PushFollow(Follow._set_in_pred400);
				s1=set();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(98, 18);
				Match(input,64,Follow._64_in_pred402); if (state.failed) return phi;
				DebugLocation(98, 22);
				Match(input,11,Follow._11_in_pred404); if (state.failed) return phi;
				DebugLocation(98, 27);
				n=(IToken)Match(input,INT,Follow._INT_in_pred408); if (state.failed) return phi;
				DebugLocation(98, 32);
				Match(input,21,Follow._21_in_pred410); if (state.failed) return phi;
				DebugLocation(98, 38);
				m=(IToken)Match(input,INT,Follow._INT_in_pred414); if (state.failed) return phi;
				DebugLocation(98, 44);
				if (state.backtracking == 0)
				{
					phi = new PDLModSetLeq(s1,int.Parse(n.Text),int.Parse(m.Text));
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// PDLGrammar.g:99:7: '|' s1= set '|' '%' n= INT '<' m= INT
				{
				DebugLocation(99, 7);
				Match(input,64,Follow._64_in_pred441); if (state.failed) return phi;
				DebugLocation(99, 13);
				PushFollow(Follow._set_in_pred445);
				s1=set();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(99, 18);
				Match(input,64,Follow._64_in_pred447); if (state.failed) return phi;
				DebugLocation(99, 22);
				Match(input,11,Follow._11_in_pred449); if (state.failed) return phi;
				DebugLocation(99, 27);
				n=(IToken)Match(input,INT,Follow._INT_in_pred453); if (state.failed) return phi;
				DebugLocation(99, 32);
				Match(input,19,Follow._19_in_pred455); if (state.failed) return phi;
				DebugLocation(99, 37);
				m=(IToken)Match(input,INT,Follow._INT_in_pred459); if (state.failed) return phi;
				DebugLocation(99, 43);
				if (state.backtracking == 0)
				{
					phi = new PDLModSetLe(s1,int.Parse(n.Text),int.Parse(m.Text));
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// PDLGrammar.g:100:7: '|' s1= set '|' '%' n= INT '>' m= INT
				{
				DebugLocation(100, 7);
				Match(input,64,Follow._64_in_pred486); if (state.failed) return phi;
				DebugLocation(100, 13);
				PushFollow(Follow._set_in_pred490);
				s1=set();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(100, 18);
				Match(input,64,Follow._64_in_pred492); if (state.failed) return phi;
				DebugLocation(100, 22);
				Match(input,11,Follow._11_in_pred494); if (state.failed) return phi;
				DebugLocation(100, 27);
				n=(IToken)Match(input,INT,Follow._INT_in_pred498); if (state.failed) return phi;
				DebugLocation(100, 32);
				Match(input,24,Follow._24_in_pred500); if (state.failed) return phi;
				DebugLocation(100, 37);
				m=(IToken)Match(input,INT,Follow._INT_in_pred504); if (state.failed) return phi;
				DebugLocation(100, 43);
				if (state.backtracking == 0)
				{
					phi = new PDLModSetGe(s1,int.Parse(n.Text),int.Parse(m.Text));
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// PDLGrammar.g:101:7: '|' s1= set '|' '%' n= INT '>=' m= INT
				{
				DebugLocation(101, 7);
				Match(input,64,Follow._64_in_pred531); if (state.failed) return phi;
				DebugLocation(101, 13);
				PushFollow(Follow._set_in_pred535);
				s1=set();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(101, 18);
				Match(input,64,Follow._64_in_pred537); if (state.failed) return phi;
				DebugLocation(101, 22);
				Match(input,11,Follow._11_in_pred539); if (state.failed) return phi;
				DebugLocation(101, 27);
				n=(IToken)Match(input,INT,Follow._INT_in_pred543); if (state.failed) return phi;
				DebugLocation(101, 32);
				Match(input,25,Follow._25_in_pred545); if (state.failed) return phi;
				DebugLocation(101, 38);
				m=(IToken)Match(input,INT,Follow._INT_in_pred549); if (state.failed) return phi;
				DebugLocation(101, 44);
				if (state.backtracking == 0)
				{
					phi = new PDLModSetGeq(s1,int.Parse(n.Text),int.Parse(m.Text));
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// PDLGrammar.g:102:7: '|' s1= set '|' ( '=' | '==' ) m= INT
				{
				DebugLocation(102, 7);
				Match(input,64,Follow._64_in_pred588); if (state.failed) return phi;
				DebugLocation(102, 13);
				PushFollow(Follow._set_in_pred592);
				s1=set();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(102, 18);
				Match(input,64,Follow._64_in_pred594); if (state.failed) return phi;
				DebugLocation(102, 22);
				if ((input.LA(1)>=22 && input.LA(1)<=23))
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(102, 35);
				m=(IToken)Match(input,INT,Follow._INT_in_pred605); if (state.failed) return phi;
				DebugLocation(102, 41);
				if (state.backtracking == 0)
				{
					phi = new PDLIntEq(s1,int.Parse(m.Text));
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// PDLGrammar.g:103:7: '|' s1= set '|' '<=' m= INT
				{
				DebugLocation(103, 7);
				Match(input,64,Follow._64_in_pred628); if (state.failed) return phi;
				DebugLocation(103, 13);
				PushFollow(Follow._set_in_pred632);
				s1=set();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(103, 18);
				Match(input,64,Follow._64_in_pred634); if (state.failed) return phi;
				DebugLocation(103, 22);
				Match(input,21,Follow._21_in_pred636); if (state.failed) return phi;
				DebugLocation(103, 28);
				m=(IToken)Match(input,INT,Follow._INT_in_pred640); if (state.failed) return phi;
				DebugLocation(103, 34);
				if (state.backtracking == 0)
				{
					phi = new PDLIntLeq(s1,int.Parse(m.Text));
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// PDLGrammar.g:104:7: '|' s1= set '|' '<' m= INT
				{
				DebugLocation(104, 7);
				Match(input,64,Follow._64_in_pred667); if (state.failed) return phi;
				DebugLocation(104, 13);
				PushFollow(Follow._set_in_pred671);
				s1=set();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(104, 18);
				Match(input,64,Follow._64_in_pred673); if (state.failed) return phi;
				DebugLocation(104, 22);
				Match(input,19,Follow._19_in_pred675); if (state.failed) return phi;
				DebugLocation(104, 27);
				m=(IToken)Match(input,INT,Follow._INT_in_pred679); if (state.failed) return phi;
				DebugLocation(104, 33);
				if (state.backtracking == 0)
				{
					phi = new PDLIntLe(s1,int.Parse(m.Text));
				}

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// PDLGrammar.g:105:7: '|' s1= set '|' '>' m= INT
				{
				DebugLocation(105, 7);
				Match(input,64,Follow._64_in_pred706); if (state.failed) return phi;
				DebugLocation(105, 13);
				PushFollow(Follow._set_in_pred710);
				s1=set();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(105, 18);
				Match(input,64,Follow._64_in_pred712); if (state.failed) return phi;
				DebugLocation(105, 22);
				Match(input,24,Follow._24_in_pred714); if (state.failed) return phi;
				DebugLocation(105, 27);
				m=(IToken)Match(input,INT,Follow._INT_in_pred718); if (state.failed) return phi;
				DebugLocation(105, 33);
				if (state.backtracking == 0)
				{
					phi = new PDLIntGe(s1,int.Parse(m.Text));
				}

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// PDLGrammar.g:106:7: '|' s1= set '|' '>=' m= INT
				{
				DebugLocation(106, 7);
				Match(input,64,Follow._64_in_pred745); if (state.failed) return phi;
				DebugLocation(106, 13);
				PushFollow(Follow._set_in_pred749);
				s1=set();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(106, 18);
				Match(input,64,Follow._64_in_pred751); if (state.failed) return phi;
				DebugLocation(106, 22);
				Match(input,25,Follow._25_in_pred753); if (state.failed) return phi;
				DebugLocation(106, 28);
				m=(IToken)Match(input,INT,Follow._INT_in_pred757); if (state.failed) return phi;
				DebugLocation(106, 34);
				if (state.backtracking == 0)
				{
					phi = new PDLIntGeq(s1,int.Parse(m.Text));
				}

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// PDLGrammar.g:107:7: ( 'all1' | 'all' ) x= FOVARIABLE '.' phi1= pred
				{
				DebugLocation(107, 7);
				if ((input.LA(1)>=34 && input.LA(1)<=35))
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(107, 23);
				x=(IToken)Match(input,FOVARIABLE,Follow._FOVARIABLE_in_pred781); if (state.failed) return phi;
				DebugLocation(107, 35);
				Match(input,18,Follow._18_in_pred783); if (state.failed) return phi;
				DebugLocation(107, 43);
				PushFollow(Follow._pred_in_pred787);
				phi1=pred();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(107, 49);
				if (state.backtracking == 0)
				{
					phi = new PDLForallFO(x.Text,phi1);
				}

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// PDLGrammar.g:108:7: ( 'ex1' | 'ex' ) x= FOVARIABLE '.' phi1= pred
				{
				DebugLocation(108, 7);
				if ((input.LA(1)>=47 && input.LA(1)<=48))
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(108, 23);
				x=(IToken)Match(input,FOVARIABLE,Follow._FOVARIABLE_in_pred816); if (state.failed) return phi;
				DebugLocation(108, 35);
				Match(input,18,Follow._18_in_pred818); if (state.failed) return phi;
				DebugLocation(108, 43);
				PushFollow(Follow._pred_in_pred822);
				phi1=pred();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(108, 49);
				if (state.backtracking == 0)
				{
					phi = new PDLExistsFO(x.Text,phi1);
				}

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// PDLGrammar.g:109:7: 'all2' x= SOVARIABLE '.' phi1= pred
				{
				DebugLocation(109, 7);
				Match(input,36,Follow._36_in_pred834); if (state.failed) return phi;
				DebugLocation(109, 15);
				x=(IToken)Match(input,SOVARIABLE,Follow._SOVARIABLE_in_pred838); if (state.failed) return phi;
				DebugLocation(109, 27);
				Match(input,18,Follow._18_in_pred840); if (state.failed) return phi;
				DebugLocation(109, 35);
				PushFollow(Follow._pred_in_pred844);
				phi1=pred();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(109, 41);
				if (state.backtracking == 0)
				{
					phi = new PDLForallSO(x.Text,phi1);
				}

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// PDLGrammar.g:110:7: 'ex2' x= SOVARIABLE '.' phi1= pred
				{
				DebugLocation(110, 7);
				Match(input,49,Follow._49_in_pred863); if (state.failed) return phi;
				DebugLocation(110, 14);
				x=(IToken)Match(input,SOVARIABLE,Follow._SOVARIABLE_in_pred867); if (state.failed) return phi;
				DebugLocation(110, 26);
				Match(input,18,Follow._18_in_pred869); if (state.failed) return phi;
				DebugLocation(110, 34);
				PushFollow(Follow._pred_in_pred873);
				phi1=pred();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(110, 40);
				if (state.backtracking == 0)
				{
					phi = new PDLExistsSO(x.Text,phi1);
				}

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// PDLGrammar.g:111:7: '(' phi1= pred ( '&' | 'and' ) phi2= pred ')'
				{
				DebugLocation(111, 7);
				Match(input,13,Follow._13_in_pred905); if (state.failed) return phi;
				DebugLocation(111, 14);
				PushFollow(Follow._pred_in_pred908);
				phi1=pred();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(111, 20);
				if (input.LA(1)==12||input.LA(1)==42)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(111, 36);
				PushFollow(Follow._pred_in_pred918);
				phi2=pred();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(111, 41);
				Match(input,14,Follow._14_in_pred919); if (state.failed) return phi;
				DebugLocation(111, 45);
				if (state.backtracking == 0)
				{
					phi = new PDLAnd(phi1,phi2);
				}

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// PDLGrammar.g:112:7: '(' phi1= pred ( 'V' | '|' | 'or' ) phi2= pred ')'
				{
				DebugLocation(112, 7);
				Match(input,13,Follow._13_in_pred942); if (state.failed) return phi;
				DebugLocation(112, 14);
				PushFollow(Follow._pred_in_pred945);
				phi1=pred();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(112, 20);
				if (input.LA(1)==32||input.LA(1)==59||input.LA(1)==64)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(112, 39);
				PushFollow(Follow._pred_in_pred957);
				phi2=pred();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(112, 44);
				Match(input,14,Follow._14_in_pred958); if (state.failed) return phi;
				DebugLocation(112, 48);
				if (state.backtracking == 0)
				{
					phi = new PDLOr(phi1,phi2);
				}

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// PDLGrammar.g:113:7: '(' phi1= pred ( '->' | '-->' ) phi2= pred ')'
				{
				DebugLocation(113, 7);
				Match(input,13,Follow._13_in_pred985); if (state.failed) return phi;
				DebugLocation(113, 14);
				PushFollow(Follow._pred_in_pred988);
				phi1=pred();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(113, 20);
				if ((input.LA(1)>=16 && input.LA(1)<=17))
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(113, 37);
				PushFollow(Follow._pred_in_pred998);
				phi2=pred();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(113, 42);
				Match(input,14,Follow._14_in_pred999); if (state.failed) return phi;
				DebugLocation(113, 46);
				if (state.backtracking == 0)
				{
					phi = new PDLIf(phi1,phi2);
				}

				}
				break;
			case 28:
				DebugEnterAlt(28);
				// PDLGrammar.g:114:7: '(' phi1= pred '<->' phi2= pred ')'
				{
				DebugLocation(114, 7);
				Match(input,13,Follow._13_in_pred1026); if (state.failed) return phi;
				DebugLocation(114, 14);
				PushFollow(Follow._pred_in_pred1029);
				phi1=pred();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(114, 20);
				Match(input,20,Follow._20_in_pred1031); if (state.failed) return phi;
				DebugLocation(114, 30);
				PushFollow(Follow._pred_in_pred1035);
				phi2=pred();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(114, 35);
				Match(input,14,Follow._14_in_pred1036); if (state.failed) return phi;
				DebugLocation(114, 39);
				if (state.backtracking == 0)
				{
					phi = new PDLIff(phi1,phi2);
				}

				}
				break;
			case 29:
				DebugEnterAlt(29);
				// PDLGrammar.g:115:7: ( '!' | 'not' ) phi1= pred
				{
				DebugLocation(115, 7);
				if (input.LA(1)==10||input.LA(1)==58)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(115, 23);
				PushFollow(Follow._pred_in_pred1079);
				phi1=pred();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(115, 29);
				if (state.backtracking == 0)
				{
					phi = new PDLNot(phi1);
				}

				}
				break;
			case 30:
				DebugEnterAlt(30);
				// PDLGrammar.g:116:7: 'true'
				{
				DebugLocation(116, 7);
				Match(input,61,Follow._61_in_pred1098); if (state.failed) return phi;
				DebugLocation(116, 14);
				if (state.backtracking == 0)
				{
					phi = new PDLTrue();
				}

				}
				break;
			case 31:
				DebugEnterAlt(31);
				// PDLGrammar.g:117:7: 'false'
				{
				DebugLocation(117, 7);
				Match(input,50,Follow._50_in_pred1117); if (state.failed) return phi;
				DebugLocation(117, 15);
				if (state.backtracking == 0)
				{
					phi = new PDLFalse();
				}

				}
				break;
			case 32:
				DebugEnterAlt(32);
				// PDLGrammar.g:118:7: 'startsWith' '\\'' s= ( STRING | CHAR ) '\\''
				{
				DebugLocation(118, 7);
				Match(input,60,Follow._60_in_pred1140); if (state.failed) return phi;
				DebugLocation(118, 20);
				Match(input,33,Follow._33_in_pred1142); if (state.failed) return phi;
				DebugLocation(118, 26);

				s=(IToken)input.LT(1);
				if (input.LA(1)==CHAR||input.LA(1)==STRING)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(118, 43);
				Match(input,33,Follow._33_in_pred1154); if (state.failed) return phi;
				DebugLocation(118, 48);
				if (state.backtracking == 0)
				{
					phi = new PDLStartsWith(s.Text);
				}

				}
				break;
			case 33:
				DebugEnterAlt(33);
				// PDLGrammar.g:119:7: 'endsWith' '\\'' s= ( STRING | CHAR ) '\\''
				{
				DebugLocation(119, 7);
				Match(input,46,Follow._46_in_pred1173); if (state.failed) return phi;
				DebugLocation(119, 18);
				Match(input,33,Follow._33_in_pred1175); if (state.failed) return phi;
				DebugLocation(119, 24);

				s=(IToken)input.LT(1);
				if (input.LA(1)==CHAR||input.LA(1)==STRING)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(119, 41);
				Match(input,33,Follow._33_in_pred1187); if (state.failed) return phi;
				DebugLocation(119, 46);
				if (state.backtracking == 0)
				{
					phi = new PDLEndsWith(s.Text);
				}

				}
				break;
			case 34:
				DebugEnterAlt(34);
				// PDLGrammar.g:120:7: 'isString' '\\'' s= ( STRING | CHAR ) '\\''
				{
				DebugLocation(120, 7);
				Match(input,55,Follow._55_in_pred1202); if (state.failed) return phi;
				DebugLocation(120, 18);
				Match(input,33,Follow._33_in_pred1204); if (state.failed) return phi;
				DebugLocation(120, 24);

				s=(IToken)input.LT(1);
				if (input.LA(1)==CHAR||input.LA(1)==STRING)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(120, 41);
				Match(input,33,Follow._33_in_pred1216); if (state.failed) return phi;
				DebugLocation(120, 46);
				if (state.backtracking == 0)
				{
					phi = new PDLIsString(s.Text);
				}

				}
				break;
			case 35:
				DebugEnterAlt(35);
				// PDLGrammar.g:121:7: 'contains' '\\'' s= ( STRING | CHAR ) '\\''
				{
				DebugLocation(121, 7);
				Match(input,44,Follow._44_in_pred1235); if (state.failed) return phi;
				DebugLocation(121, 18);
				Match(input,33,Follow._33_in_pred1237); if (state.failed) return phi;
				DebugLocation(121, 24);

				s=(IToken)input.LT(1);
				if (input.LA(1)==CHAR||input.LA(1)==STRING)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return phi;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(121, 41);
				Match(input,33,Follow._33_in_pred1249); if (state.failed) return phi;
				DebugLocation(121, 46);
				if (state.backtracking == 0)
				{
					phi = new PDLEndsWith(s.Text);
				}

				}
				break;
			case 36:
				DebugEnterAlt(36);
				// PDLGrammar.g:122:7: 'emptyStr'
				{
				DebugLocation(122, 7);
				Match(input,45,Follow._45_in_pred1259); if (state.failed) return phi;
				DebugLocation(122, 18);
				if (state.backtracking == 0)
				{
					phi = new PDLEmptyString();
				}

				}
				break;
			case 37:
				DebugEnterAlt(37);
				// PDLGrammar.g:123:7: '(' phi1= pred ')'
				{
				DebugLocation(123, 7);
				Match(input,13,Follow._13_in_pred1275); if (state.failed) return phi;
				DebugLocation(123, 15);
				PushFollow(Follow._pred_in_pred1279);
				phi1=pred();
				PopFollow();
				if (state.failed) return phi;
				DebugLocation(123, 21);
				Match(input,14,Follow._14_in_pred1281); if (state.failed) return phi;
				DebugLocation(123, 25);
				if (state.backtracking == 0)
				{
					phi = phi1;
				}

				}
				break;

			}
		}

		    catch (RecognitionException re){
		        if(re is NoViableAltException)
		       {
		            var e = re as NoViableAltException;
		                StringBuilder msg = new StringBuilder();
		                msg.AppendFormat("Position {0}: bad input after '{1}'", e.CharPositionInLine, e.Token!=null? e.Token.Text: ((char)e.Character).ToString());
		                throw new Parse.PDLParseException(msg.ToString());
		       }
		       else{
		            if (re is MismatchedTokenException)
		            {
		            	var e = re as MismatchedTokenException;
		                StringBuilder msg = new StringBuilder();
		                msg.AppendFormat("Position {0}: unexpected input '{1}', expecting {2}", e.CharPositionInLine, e.Token!=null? e.Token.Text: ((char)e.Character).ToString(),
		                    e.TokenNames != null ? e.TokenNames[e.Expecting] : ((char)e.Expecting).ToString());
		                throw new Parse.PDLParseException(msg.ToString());
		            }
		            else
		            if(re is EarlyExitException)
		            {
		            	var e = re as EarlyExitException;
		                StringBuilder msg = new StringBuilder();
		                msg.AppendFormat("Position {0}: something missing at input '{1}'", e.CharPositionInLine, e.Token.Text);
		                throw new Parse.PDLParseException(msg.ToString());
		            }
		            else
		                throw new PDLParseException(re.ToString());
		       }
		    }

		finally
		{
			TraceOut("pred", 2);
			LeaveRule("pred", 2);
			LeaveRule_pred();
	    }
	 	DebugLocation(124, 2);
		} finally { DebugExitRule(GrammarFileName, "pred"); }
		return phi;

	}
	// $ANTLR end "pred"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_position() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_position() {}
	// $ANTLR start "position"
	// PDLGrammar.g:126:1: position returns [PDLPos pp] : (s= FOVARIABLE | 'first' | 'last' | 'S' '(' p1= position ')' | 'P' '(' p1= position ')' | 'firstOcc' '\\'' str= ( STRING | CHAR ) '\\'' | 'lastOcc' '\\'' str= ( STRING | CHAR ) '\\'' | '(' p1= position ')' );
	[GrammarRule("position")]
	private PDLPos position()
	{
		EnterRule_position();
		EnterRule("position", 3);
		TraceIn("position", 3);
	    PDLPos pp = default(PDLPos);


	    IToken s = default(IToken);
	    IToken str = default(IToken);
	    PDLPos p1 = default(PDLPos);

		try { DebugEnterRule(GrammarFileName, "position");
		DebugLocation(126, 0);
		try
		{
			// PDLGrammar.g:126:29: (s= FOVARIABLE | 'first' | 'last' | 'S' '(' p1= position ')' | 'P' '(' p1= position ')' | 'firstOcc' '\\'' str= ( STRING | CHAR ) '\\'' | 'lastOcc' '\\'' str= ( STRING | CHAR ) '\\'' | '(' p1= position ')' )
			int alt2=8;
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			switch (input.LA(1))
			{
			case FOVARIABLE:
				{
				alt2 = 1;
				}
				break;
			case 51:
				{
				alt2 = 2;
				}
				break;
			case 56:
				{
				alt2 = 3;
				}
				break;
			case 30:
				{
				alt2 = 4;
				}
				break;
			case 29:
				{
				alt2 = 5;
				}
				break;
			case 52:
				{
				alt2 = 6;
				}
				break;
			case 57:
				{
				alt2 = 7;
				}
				break;
			case 13:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return pp;}
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// PDLGrammar.g:127:2: s= FOVARIABLE
				{
				DebugLocation(127, 3);
				s=(IToken)Match(input,FOVARIABLE,Follow._FOVARIABLE_in_position1306); if (state.failed) return pp;
				DebugLocation(127, 15);
				if (state.backtracking == 0)
				{
					pp=new PDLPosVar(s.Text);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// PDLGrammar.g:128:7: 'first'
				{
				DebugLocation(128, 7);
				Match(input,51,Follow._51_in_position1316); if (state.failed) return pp;
				DebugLocation(128, 15);
				if (state.backtracking == 0)
				{
					pp=new PDLFirst();
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// PDLGrammar.g:129:7: 'last'
				{
				DebugLocation(129, 7);
				Match(input,56,Follow._56_in_position1327); if (state.failed) return pp;
				DebugLocation(129, 14);
				if (state.backtracking == 0)
				{
					pp=new PDLLast();
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// PDLGrammar.g:130:7: 'S' '(' p1= position ')'
				{
				DebugLocation(130, 7);
				Match(input,30,Follow._30_in_position1342); if (state.failed) return pp;
				DebugLocation(130, 11);
				Match(input,13,Follow._13_in_position1344); if (state.failed) return pp;
				DebugLocation(130, 17);
				PushFollow(Follow._position_in_position1348);
				p1=position();
				PopFollow();
				if (state.failed) return pp;
				DebugLocation(130, 27);
				Match(input,14,Follow._14_in_position1350); if (state.failed) return pp;
				DebugLocation(130, 31);
				if (state.backtracking == 0)
				{
					pp=new PDLSuccessor(p1);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// PDLGrammar.g:131:7: 'P' '(' p1= position ')'
				{
				DebugLocation(131, 7);
				Match(input,29,Follow._29_in_position1369); if (state.failed) return pp;
				DebugLocation(131, 11);
				Match(input,13,Follow._13_in_position1371); if (state.failed) return pp;
				DebugLocation(131, 17);
				PushFollow(Follow._position_in_position1375);
				p1=position();
				PopFollow();
				if (state.failed) return pp;
				DebugLocation(131, 27);
				Match(input,14,Follow._14_in_position1377); if (state.failed) return pp;
				DebugLocation(131, 31);
				if (state.backtracking == 0)
				{
					pp=new PDLPredecessor(p1);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// PDLGrammar.g:132:7: 'firstOcc' '\\'' str= ( STRING | CHAR ) '\\''
				{
				DebugLocation(132, 7);
				Match(input,52,Follow._52_in_position1391); if (state.failed) return pp;
				DebugLocation(132, 18);
				Match(input,33,Follow._33_in_position1393); if (state.failed) return pp;
				DebugLocation(132, 26);

				str=(IToken)input.LT(1);
				if (input.LA(1)==CHAR||input.LA(1)==STRING)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return pp;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(132, 43);
				Match(input,33,Follow._33_in_position1405); if (state.failed) return pp;
				DebugLocation(132, 48);
				if (state.backtracking == 0)
				{
					pp = new PDLFirstOcc(str.Text);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// PDLGrammar.g:133:7: 'lastOcc' '\\'' str= ( STRING | CHAR ) '\\''
				{
				DebugLocation(133, 7);
				Match(input,57,Follow._57_in_position1419); if (state.failed) return pp;
				DebugLocation(133, 17);
				Match(input,33,Follow._33_in_position1421); if (state.failed) return pp;
				DebugLocation(133, 25);

				str=(IToken)input.LT(1);
				if (input.LA(1)==CHAR||input.LA(1)==STRING)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return pp;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(133, 42);
				Match(input,33,Follow._33_in_position1433); if (state.failed) return pp;
				DebugLocation(133, 47);
				if (state.backtracking == 0)
				{
					pp = new PDLLastOcc(str.Text);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// PDLGrammar.g:134:7: '(' p1= position ')'
				{
				DebugLocation(134, 7);
				Match(input,13,Follow._13_in_position1448); if (state.failed) return pp;
				DebugLocation(134, 13);
				PushFollow(Follow._position_in_position1452);
				p1=position();
				PopFollow();
				if (state.failed) return pp;
				DebugLocation(134, 23);
				Match(input,14,Follow._14_in_position1454); if (state.failed) return pp;
				DebugLocation(134, 27);
				if (state.backtracking == 0)
				{
					pp = p1;
				}

				}
				break;

			}
		}

		    catch (RecognitionException re){
		        if(re is NoViableAltException)
		       {
		            var e = re as NoViableAltException;
		                StringBuilder msg = new StringBuilder();
		                msg.AppendFormat("Position {0}: bad input after '{1}'", e.CharPositionInLine, e.Token!=null? e.Token.Text: ((char)e.Character).ToString());
		                throw new Parse.PDLParseException(msg.ToString());
		       }
		       else{
		            if (re is MismatchedTokenException)
		            {
		            	var e = re as MismatchedTokenException;
		                StringBuilder msg = new StringBuilder();
		                msg.AppendFormat("Position {0}: unexpected input '{1}', expecting {2}", e.CharPositionInLine, e.Token!=null? e.Token.Text: ((char)e.Character).ToString(),
		                    e.TokenNames != null ? e.TokenNames[e.Expecting] : ((char)e.Expecting).ToString());
		                throw new Parse.PDLParseException(msg.ToString());
		            }
		            else
		            if(re is EarlyExitException)
		            {
		            	var e = re as EarlyExitException;
		                StringBuilder msg = new StringBuilder();
		                msg.AppendFormat("Position {0}: something missing at input '{1}'", e.CharPositionInLine, e.Token.Text);
		                throw new Parse.PDLParseException(msg.ToString());
		            }
		            else
		                throw new PDLParseException(re.ToString());
		       }
		    }

		finally
		{
			TraceOut("position", 3);
			LeaveRule("position", 3);
			LeaveRule_position();
	    }
	 	DebugLocation(135, 0);
		} finally { DebugExitRule(GrammarFileName, "position"); }
		return pp;

	}
	// $ANTLR end "position"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set() {}
	// $ANTLR start "set"
	// PDLGrammar.g:137:1: set returns [PDLSet ss] : (s= SOVARIABLE | 'indOf' '\\'' str= ( STRING | CHAR ) '\\'' | 'allPos' | 'allBefore' p1= position | 'allAfter' p1= position | 'allUpto' p1= position | 'allFrom' p1= position | '(' s1= set ( 'inters' ) s2= set ')' | '(' s1= set ( 'union' | 'U' ) s2= set ')' | '{' s= FOVARIABLE '|' phi= pred '}' | '(' s1= set ')' );
	[GrammarRule("set")]
	private PDLSet set()
	{
		EnterRule_set();
		EnterRule("set", 4);
		TraceIn("set", 4);
	    PDLSet ss = default(PDLSet);


	    IToken s = default(IToken);
	    IToken str = default(IToken);
	    PDLPos p1 = default(PDLPos);
	    PDLSet s1 = default(PDLSet);
	    PDLSet s2 = default(PDLSet);
	    PDLPred phi = default(PDLPred);

		try { DebugEnterRule(GrammarFileName, "set");
		DebugLocation(137, 3);
		try
		{
			// PDLGrammar.g:137:24: (s= SOVARIABLE | 'indOf' '\\'' str= ( STRING | CHAR ) '\\'' | 'allPos' | 'allBefore' p1= position | 'allAfter' p1= position | 'allUpto' p1= position | 'allFrom' p1= position | '(' s1= set ( 'inters' ) s2= set ')' | '(' s1= set ( 'union' | 'U' ) s2= set ')' | '{' s= FOVARIABLE '|' phi= pred '}' | '(' s1= set ')' )
			int alt3=11;
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			switch (input.LA(1))
			{
			case SOVARIABLE:
				{
				alt3 = 1;
				}
				break;
			case 53:
				{
				alt3 = 2;
				}
				break;
			case 40:
				{
				alt3 = 3;
				}
				break;
			case 38:
				{
				alt3 = 4;
				}
				break;
			case 37:
				{
				alt3 = 5;
				}
				break;
			case 41:
				{
				alt3 = 6;
				}
				break;
			case 39:
				{
				alt3 = 7;
				}
				break;
			case 13:
				{
				int LA3_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_PDLGrammar_fragment)))
				{
					alt3 = 8;
				}
				else if ((EvaluatePredicate(synpred70_PDLGrammar_fragment)))
				{
					alt3 = 9;
				}
				else if ((true))
				{
					alt3 = 11;
				}

				}
				break;
			case 63:
				{
				alt3 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return ss;}
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// PDLGrammar.g:138:8: s= SOVARIABLE
				{
				DebugLocation(138, 9);
				s=(IToken)Match(input,SOVARIABLE,Follow._SOVARIABLE_in_set1490); if (state.failed) return ss;
				DebugLocation(138, 21);
				if (state.backtracking == 0)
				{
					ss=new PDLSetVar(s.Text);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// PDLGrammar.g:139:7: 'indOf' '\\'' str= ( STRING | CHAR ) '\\''
				{
				DebugLocation(139, 7);
				Match(input,53,Follow._53_in_set1501); if (state.failed) return ss;
				DebugLocation(139, 15);
				Match(input,33,Follow._33_in_set1503); if (state.failed) return ss;
				DebugLocation(139, 23);

				str=(IToken)input.LT(1);
				if (input.LA(1)==CHAR||input.LA(1)==STRING)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return ss;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(139, 40);
				Match(input,33,Follow._33_in_set1515); if (state.failed) return ss;
				DebugLocation(139, 45);
				if (state.backtracking == 0)
				{
					ss = new PDLIndicesOf(str.Text);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// PDLGrammar.g:140:7: 'allPos'
				{
				DebugLocation(140, 7);
				Match(input,40,Follow._40_in_set1528); if (state.failed) return ss;
				DebugLocation(140, 16);
				if (state.backtracking == 0)
				{
					ss = new PDLAllPos();
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// PDLGrammar.g:141:7: 'allBefore' p1= position
				{
				DebugLocation(141, 7);
				Match(input,38,Follow._38_in_set1545); if (state.failed) return ss;
				DebugLocation(141, 21);
				PushFollow(Follow._position_in_set1549);
				p1=position();
				PopFollow();
				if (state.failed) return ss;
				DebugLocation(141, 31);
				if (state.backtracking == 0)
				{
					ss = new PDLAllPosBefore(p1);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// PDLGrammar.g:142:7: 'allAfter' p1= position
				{
				DebugLocation(142, 7);
				Match(input,37,Follow._37_in_set1569); if (state.failed) return ss;
				DebugLocation(142, 20);
				PushFollow(Follow._position_in_set1573);
				p1=position();
				PopFollow();
				if (state.failed) return ss;
				DebugLocation(142, 30);
				if (state.backtracking == 0)
				{
					ss = new PDLAllPosAfter(p1);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// PDLGrammar.g:143:7: 'allUpto' p1= position
				{
				DebugLocation(143, 7);
				Match(input,41,Follow._41_in_set1597); if (state.failed) return ss;
				DebugLocation(143, 19);
				PushFollow(Follow._position_in_set1601);
				p1=position();
				PopFollow();
				if (state.failed) return ss;
				DebugLocation(143, 29);
				if (state.backtracking == 0)
				{
					ss = new PDLAllPosUpto(p1);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// PDLGrammar.g:144:7: 'allFrom' p1= position
				{
				DebugLocation(144, 7);
				Match(input,39,Follow._39_in_set1621); if (state.failed) return ss;
				DebugLocation(144, 19);
				PushFollow(Follow._position_in_set1625);
				p1=position();
				PopFollow();
				if (state.failed) return ss;
				DebugLocation(144, 29);
				if (state.backtracking == 0)
				{
					ss = new PDLAllPosFrom(p1);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// PDLGrammar.g:145:7: '(' s1= set ( 'inters' ) s2= set ')'
				{
				DebugLocation(145, 7);
				Match(input,13,Follow._13_in_set1659); if (state.failed) return ss;
				DebugLocation(145, 13);
				PushFollow(Follow._set_in_set1663);
				s1=set();
				PopFollow();
				if (state.failed) return ss;
				DebugLocation(145, 18);
				// PDLGrammar.g:145:18: ( 'inters' )
				DebugEnterAlt(1);
				// PDLGrammar.g:145:19: 'inters'
				{
				DebugLocation(145, 19);
				Match(input,54,Follow._54_in_set1666); if (state.failed) return ss;

				}

				DebugLocation(145, 31);
				PushFollow(Follow._set_in_set1671);
				s2=set();
				PopFollow();
				if (state.failed) return ss;
				DebugLocation(145, 35);
				Match(input,14,Follow._14_in_set1672); if (state.failed) return ss;
				DebugLocation(145, 39);
				if (state.backtracking == 0)
				{
					ss = new PDLIntersect(s1,s2);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// PDLGrammar.g:146:7: '(' s1= set ( 'union' | 'U' ) s2= set ')'
				{
				DebugLocation(146, 7);
				Match(input,13,Follow._13_in_set1688); if (state.failed) return ss;
				DebugLocation(146, 13);
				PushFollow(Follow._set_in_set1692);
				s1=set();
				PopFollow();
				if (state.failed) return ss;
				DebugLocation(146, 18);
				if (input.LA(1)==31||input.LA(1)==62)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return ss;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(146, 34);
				PushFollow(Follow._set_in_set1702);
				s2=set();
				PopFollow();
				if (state.failed) return ss;
				DebugLocation(146, 38);
				Match(input,14,Follow._14_in_set1703); if (state.failed) return ss;
				DebugLocation(146, 42);
				if (state.backtracking == 0)
				{
					ss = new PDLUnion(s1,s2);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// PDLGrammar.g:147:7: '{' s= FOVARIABLE '|' phi= pred '}'
				{
				DebugLocation(147, 7);
				Match(input,63,Follow._63_in_set1723); if (state.failed) return ss;
				DebugLocation(147, 12);
				s=(IToken)Match(input,FOVARIABLE,Follow._FOVARIABLE_in_set1727); if (state.failed) return ss;
				DebugLocation(147, 24);
				Match(input,64,Follow._64_in_set1729); if (state.failed) return ss;
				DebugLocation(147, 31);
				PushFollow(Follow._pred_in_set1733);
				phi=pred();
				PopFollow();
				if (state.failed) return ss;
				DebugLocation(147, 36);
				Match(input,65,Follow._65_in_set1734); if (state.failed) return ss;
				DebugLocation(147, 40);
				if (state.backtracking == 0)
				{
					ss = new PDLPredSet(s.Text,phi);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// PDLGrammar.g:148:7: '(' s1= set ')'
				{
				DebugLocation(148, 7);
				Match(input,13,Follow._13_in_set1748); if (state.failed) return ss;
				DebugLocation(148, 13);
				PushFollow(Follow._set_in_set1752);
				s1=set();
				PopFollow();
				if (state.failed) return ss;
				DebugLocation(148, 18);
				Match(input,14,Follow._14_in_set1754); if (state.failed) return ss;
				DebugLocation(148, 22);
				if (state.backtracking == 0)
				{
					ss = s1;
				}

				}
				break;

			}
		}

		    catch (RecognitionException re){
		        if(re is NoViableAltException)
		       {
		            var e = re as NoViableAltException;
		                StringBuilder msg = new StringBuilder();
		                msg.AppendFormat("Position {0}: bad input after '{1}'", e.CharPositionInLine, e.Token!=null? e.Token.Text: ((char)e.Character).ToString());
		                throw new Parse.PDLParseException(msg.ToString());
		       }
		       else{
		            if (re is MismatchedTokenException)
		            {
		            	var e = re as MismatchedTokenException;
		                StringBuilder msg = new StringBuilder();
		                msg.AppendFormat("Position {0}: unexpected input '{1}', expecting {2}", e.CharPositionInLine, e.Token!=null? e.Token.Text: ((char)e.Character).ToString(),
		                    e.TokenNames != null ? e.TokenNames[e.Expecting] : ((char)e.Expecting).ToString());
		                throw new Parse.PDLParseException(msg.ToString());
		            }
		            else
		            if(re is EarlyExitException)
		            {
		            	var e = re as EarlyExitException;
		                StringBuilder msg = new StringBuilder();
		                msg.AppendFormat("Position {0}: something missing at input '{1}'", e.CharPositionInLine, e.Token.Text);
		                throw new Parse.PDLParseException(msg.ToString());
		            }
		            else
		                throw new PDLParseException(re.ToString());
		       }
		    }

		finally
		{
			TraceOut("set", 4);
			LeaveRule("set", 4);
			LeaveRule_set();
	    }
	 	DebugLocation(149, 3);
		} finally { DebugExitRule(GrammarFileName, "set"); }
		return ss;

	}
	// $ANTLR end "set"
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred1_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred1_PDLGrammar_fragment() {}

	// $ANTLR start synpred1_PDLGrammar
	private void synpred1_PDLGrammar_fragment()
	{
		IToken a = default(IToken);
		PDLPos p1 = default(PDLPos);

		EnterRule_synpred1_PDLGrammar_fragment();
		EnterRule("synpred1_PDLGrammar_fragment", 5);
		TraceIn("synpred1_PDLGrammar_fragment", 5);
		try
		{
			// PDLGrammar.g:87:6: (a= CHAR '@' p1= position )
			DebugEnterAlt(1);
			// PDLGrammar.g:87:6: a= CHAR '@' p1= position
			{
			DebugLocation(87, 7);
			a=(IToken)Match(input,CHAR,Follow._CHAR_in_synpred1_PDLGrammar105); if (state.failed) return;
			DebugLocation(87, 13);
			Match(input,26,Follow._26_in_synpred1_PDLGrammar107); if (state.failed) return;
			DebugLocation(87, 19);
			PushFollow(Follow._position_in_synpred1_PDLGrammar111);
			p1=position();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_PDLGrammar_fragment", 5);
			LeaveRule("synpred1_PDLGrammar_fragment", 5);
			LeaveRule_synpred1_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred1_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred2_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred2_PDLGrammar_fragment() {}

	// $ANTLR start synpred2_PDLGrammar
	private void synpred2_PDLGrammar_fragment()
	{
		IToken a = default(IToken);
		PDLSet s1 = default(PDLSet);

		EnterRule_synpred2_PDLGrammar_fragment();
		EnterRule("synpred2_PDLGrammar_fragment", 6);
		TraceIn("synpred2_PDLGrammar_fragment", 6);
		try
		{
			// PDLGrammar.g:88:6: (a= CHAR '@' s1= set )
			DebugEnterAlt(1);
			// PDLGrammar.g:88:6: a= CHAR '@' s1= set
			{
			DebugLocation(88, 7);
			a=(IToken)Match(input,CHAR,Follow._CHAR_in_synpred2_PDLGrammar122); if (state.failed) return;
			DebugLocation(88, 13);
			Match(input,26,Follow._26_in_synpred2_PDLGrammar124); if (state.failed) return;
			DebugLocation(88, 19);
			PushFollow(Follow._set_in_synpred2_PDLGrammar128);
			s1=set();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_PDLGrammar_fragment", 6);
			LeaveRule("synpred2_PDLGrammar_fragment", 6);
			LeaveRule_synpred2_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred2_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred3_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred3_PDLGrammar_fragment() {}

	// $ANTLR start synpred3_PDLGrammar
	private void synpred3_PDLGrammar_fragment()
	{
		PDLPos p1 = default(PDLPos);
		PDLSet s1 = default(PDLSet);

		EnterRule_synpred3_PDLGrammar_fragment();
		EnterRule("synpred3_PDLGrammar_fragment", 7);
		TraceIn("synpred3_PDLGrammar_fragment", 7);
		try
		{
			// PDLGrammar.g:89:7: (p1= position 'belTo' s1= set )
			DebugEnterAlt(1);
			// PDLGrammar.g:89:7: p1= position 'belTo' s1= set
			{
			DebugLocation(89, 9);
			PushFollow(Follow._position_in_synpred3_PDLGrammar140);
			p1=position();
			PopFollow();
			if (state.failed) return;
			DebugLocation(89, 19);
			Match(input,43,Follow._43_in_synpred3_PDLGrammar142); if (state.failed) return;
			DebugLocation(89, 29);
			PushFollow(Follow._set_in_synpred3_PDLGrammar146);
			s1=set();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_PDLGrammar_fragment", 7);
			LeaveRule("synpred3_PDLGrammar_fragment", 7);
			LeaveRule_synpred3_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred3_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred5_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred5_PDLGrammar_fragment() {}

	// $ANTLR start synpred5_PDLGrammar
	private void synpred5_PDLGrammar_fragment()
	{
		PDLPos p1 = default(PDLPos);
		PDLPos p2 = default(PDLPos);

		EnterRule_synpred5_PDLGrammar_fragment();
		EnterRule("synpred5_PDLGrammar_fragment", 9);
		TraceIn("synpred5_PDLGrammar_fragment", 9);
		try
		{
			// PDLGrammar.g:90:7: (p1= position ( '=' | '==' ) p2= position )
			DebugEnterAlt(1);
			// PDLGrammar.g:90:7: p1= position ( '=' | '==' ) p2= position
			{
			DebugLocation(90, 9);
			PushFollow(Follow._position_in_synpred5_PDLGrammar158);
			p1=position();
			PopFollow();
			if (state.failed) return;
			DebugLocation(90, 19);
			if ((input.LA(1)>=22 && input.LA(1)<=23))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(90, 33);
			PushFollow(Follow._position_in_synpred5_PDLGrammar169);
			p2=position();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_PDLGrammar_fragment", 9);
			LeaveRule("synpred5_PDLGrammar_fragment", 9);
			LeaveRule_synpred5_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred5_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred6_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred6_PDLGrammar_fragment() {}

	// $ANTLR start synpred6_PDLGrammar
	private void synpred6_PDLGrammar_fragment()
	{
		PDLPos p1 = default(PDLPos);
		PDLPos p2 = default(PDLPos);

		EnterRule_synpred6_PDLGrammar_fragment();
		EnterRule("synpred6_PDLGrammar_fragment", 10);
		TraceIn("synpred6_PDLGrammar_fragment", 10);
		try
		{
			// PDLGrammar.g:91:7: (p1= position '<=' p2= position )
			DebugEnterAlt(1);
			// PDLGrammar.g:91:7: p1= position '<=' p2= position
			{
			DebugLocation(91, 9);
			PushFollow(Follow._position_in_synpred6_PDLGrammar181);
			p1=position();
			PopFollow();
			if (state.failed) return;
			DebugLocation(91, 19);
			Match(input,21,Follow._21_in_synpred6_PDLGrammar183); if (state.failed) return;
			DebugLocation(91, 26);
			PushFollow(Follow._position_in_synpred6_PDLGrammar187);
			p2=position();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_PDLGrammar_fragment", 10);
			LeaveRule("synpred6_PDLGrammar_fragment", 10);
			LeaveRule_synpred6_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred6_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred7_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred7_PDLGrammar_fragment() {}

	// $ANTLR start synpred7_PDLGrammar
	private void synpred7_PDLGrammar_fragment()
	{
		PDLPos p1 = default(PDLPos);
		PDLPos p2 = default(PDLPos);

		EnterRule_synpred7_PDLGrammar_fragment();
		EnterRule("synpred7_PDLGrammar_fragment", 11);
		TraceIn("synpred7_PDLGrammar_fragment", 11);
		try
		{
			// PDLGrammar.g:92:7: (p1= position '<' p2= position )
			DebugEnterAlt(1);
			// PDLGrammar.g:92:7: p1= position '<' p2= position
			{
			DebugLocation(92, 9);
			PushFollow(Follow._position_in_synpred7_PDLGrammar199);
			p1=position();
			PopFollow();
			if (state.failed) return;
			DebugLocation(92, 19);
			Match(input,19,Follow._19_in_synpred7_PDLGrammar201); if (state.failed) return;
			DebugLocation(92, 25);
			PushFollow(Follow._position_in_synpred7_PDLGrammar205);
			p2=position();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred7_PDLGrammar_fragment", 11);
			LeaveRule("synpred7_PDLGrammar_fragment", 11);
			LeaveRule_synpred7_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred7_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred8_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred8_PDLGrammar_fragment() {}

	// $ANTLR start synpred8_PDLGrammar
	private void synpred8_PDLGrammar_fragment()
	{
		PDLPos p1 = default(PDLPos);
		PDLPos p2 = default(PDLPos);

		EnterRule_synpred8_PDLGrammar_fragment();
		EnterRule("synpred8_PDLGrammar_fragment", 12);
		TraceIn("synpred8_PDLGrammar_fragment", 12);
		try
		{
			// PDLGrammar.g:93:7: (p1= position '>' p2= position )
			DebugEnterAlt(1);
			// PDLGrammar.g:93:7: p1= position '>' p2= position
			{
			DebugLocation(93, 9);
			PushFollow(Follow._position_in_synpred8_PDLGrammar217);
			p1=position();
			PopFollow();
			if (state.failed) return;
			DebugLocation(93, 19);
			Match(input,24,Follow._24_in_synpred8_PDLGrammar219); if (state.failed) return;
			DebugLocation(93, 25);
			PushFollow(Follow._position_in_synpred8_PDLGrammar223);
			p2=position();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_PDLGrammar_fragment", 12);
			LeaveRule("synpred8_PDLGrammar_fragment", 12);
			LeaveRule_synpred8_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred8_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred9_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred9_PDLGrammar_fragment() {}

	// $ANTLR start synpred9_PDLGrammar
	private void synpred9_PDLGrammar_fragment()
	{
		PDLPos p1 = default(PDLPos);
		PDLPos p2 = default(PDLPos);

		EnterRule_synpred9_PDLGrammar_fragment();
		EnterRule("synpred9_PDLGrammar_fragment", 13);
		TraceIn("synpred9_PDLGrammar_fragment", 13);
		try
		{
			// PDLGrammar.g:94:7: (p1= position '>=' p2= position )
			DebugEnterAlt(1);
			// PDLGrammar.g:94:7: p1= position '>=' p2= position
			{
			DebugLocation(94, 9);
			PushFollow(Follow._position_in_synpred9_PDLGrammar243);
			p1=position();
			PopFollow();
			if (state.failed) return;
			DebugLocation(94, 19);
			Match(input,25,Follow._25_in_synpred9_PDLGrammar245); if (state.failed) return;
			DebugLocation(94, 26);
			PushFollow(Follow._position_in_synpred9_PDLGrammar249);
			p2=position();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_PDLGrammar_fragment", 13);
			LeaveRule("synpred9_PDLGrammar_fragment", 13);
			LeaveRule_synpred9_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred9_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred13_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred13_PDLGrammar_fragment() {}

	// $ANTLR start synpred13_PDLGrammar
	private void synpred13_PDLGrammar_fragment()
	{
		IToken n = default(IToken);
		IToken m = default(IToken);
		PDLSet s1 = default(PDLSet);

		EnterRule_synpred13_PDLGrammar_fragment();
		EnterRule("synpred13_PDLGrammar_fragment", 17);
		TraceIn("synpred13_PDLGrammar_fragment", 17);
		try
		{
			// PDLGrammar.g:97:7: ( '|' s1= set '|' '%' n= INT ( '=' | '==' ) m= INT )
			DebugEnterAlt(1);
			// PDLGrammar.g:97:7: '|' s1= set '|' '%' n= INT ( '=' | '==' ) m= INT
			{
			DebugLocation(97, 7);
			Match(input,64,Follow._64_in_synpred13_PDLGrammar351); if (state.failed) return;
			DebugLocation(97, 13);
			PushFollow(Follow._set_in_synpred13_PDLGrammar355);
			s1=set();
			PopFollow();
			if (state.failed) return;
			DebugLocation(97, 18);
			Match(input,64,Follow._64_in_synpred13_PDLGrammar357); if (state.failed) return;
			DebugLocation(97, 22);
			Match(input,11,Follow._11_in_synpred13_PDLGrammar359); if (state.failed) return;
			DebugLocation(97, 27);
			n=(IToken)Match(input,INT,Follow._INT_in_synpred13_PDLGrammar363); if (state.failed) return;
			DebugLocation(97, 32);
			if ((input.LA(1)>=22 && input.LA(1)<=23))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(97, 45);
			m=(IToken)Match(input,INT,Follow._INT_in_synpred13_PDLGrammar374); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_PDLGrammar_fragment", 17);
			LeaveRule("synpred13_PDLGrammar_fragment", 17);
			LeaveRule_synpred13_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred13_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred14_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred14_PDLGrammar_fragment() {}

	// $ANTLR start synpred14_PDLGrammar
	private void synpred14_PDLGrammar_fragment()
	{
		IToken n = default(IToken);
		IToken m = default(IToken);
		PDLSet s1 = default(PDLSet);

		EnterRule_synpred14_PDLGrammar_fragment();
		EnterRule("synpred14_PDLGrammar_fragment", 18);
		TraceIn("synpred14_PDLGrammar_fragment", 18);
		try
		{
			// PDLGrammar.g:98:7: ( '|' s1= set '|' '%' n= INT '<=' m= INT )
			DebugEnterAlt(1);
			// PDLGrammar.g:98:7: '|' s1= set '|' '%' n= INT '<=' m= INT
			{
			DebugLocation(98, 7);
			Match(input,64,Follow._64_in_synpred14_PDLGrammar396); if (state.failed) return;
			DebugLocation(98, 13);
			PushFollow(Follow._set_in_synpred14_PDLGrammar400);
			s1=set();
			PopFollow();
			if (state.failed) return;
			DebugLocation(98, 18);
			Match(input,64,Follow._64_in_synpred14_PDLGrammar402); if (state.failed) return;
			DebugLocation(98, 22);
			Match(input,11,Follow._11_in_synpred14_PDLGrammar404); if (state.failed) return;
			DebugLocation(98, 27);
			n=(IToken)Match(input,INT,Follow._INT_in_synpred14_PDLGrammar408); if (state.failed) return;
			DebugLocation(98, 32);
			Match(input,21,Follow._21_in_synpred14_PDLGrammar410); if (state.failed) return;
			DebugLocation(98, 38);
			m=(IToken)Match(input,INT,Follow._INT_in_synpred14_PDLGrammar414); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_PDLGrammar_fragment", 18);
			LeaveRule("synpred14_PDLGrammar_fragment", 18);
			LeaveRule_synpred14_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred14_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred15_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred15_PDLGrammar_fragment() {}

	// $ANTLR start synpred15_PDLGrammar
	private void synpred15_PDLGrammar_fragment()
	{
		IToken n = default(IToken);
		IToken m = default(IToken);
		PDLSet s1 = default(PDLSet);

		EnterRule_synpred15_PDLGrammar_fragment();
		EnterRule("synpred15_PDLGrammar_fragment", 19);
		TraceIn("synpred15_PDLGrammar_fragment", 19);
		try
		{
			// PDLGrammar.g:99:7: ( '|' s1= set '|' '%' n= INT '<' m= INT )
			DebugEnterAlt(1);
			// PDLGrammar.g:99:7: '|' s1= set '|' '%' n= INT '<' m= INT
			{
			DebugLocation(99, 7);
			Match(input,64,Follow._64_in_synpred15_PDLGrammar441); if (state.failed) return;
			DebugLocation(99, 13);
			PushFollow(Follow._set_in_synpred15_PDLGrammar445);
			s1=set();
			PopFollow();
			if (state.failed) return;
			DebugLocation(99, 18);
			Match(input,64,Follow._64_in_synpred15_PDLGrammar447); if (state.failed) return;
			DebugLocation(99, 22);
			Match(input,11,Follow._11_in_synpred15_PDLGrammar449); if (state.failed) return;
			DebugLocation(99, 27);
			n=(IToken)Match(input,INT,Follow._INT_in_synpred15_PDLGrammar453); if (state.failed) return;
			DebugLocation(99, 32);
			Match(input,19,Follow._19_in_synpred15_PDLGrammar455); if (state.failed) return;
			DebugLocation(99, 37);
			m=(IToken)Match(input,INT,Follow._INT_in_synpred15_PDLGrammar459); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred15_PDLGrammar_fragment", 19);
			LeaveRule("synpred15_PDLGrammar_fragment", 19);
			LeaveRule_synpred15_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred15_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred16_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred16_PDLGrammar_fragment() {}

	// $ANTLR start synpred16_PDLGrammar
	private void synpred16_PDLGrammar_fragment()
	{
		IToken n = default(IToken);
		IToken m = default(IToken);
		PDLSet s1 = default(PDLSet);

		EnterRule_synpred16_PDLGrammar_fragment();
		EnterRule("synpred16_PDLGrammar_fragment", 20);
		TraceIn("synpred16_PDLGrammar_fragment", 20);
		try
		{
			// PDLGrammar.g:100:7: ( '|' s1= set '|' '%' n= INT '>' m= INT )
			DebugEnterAlt(1);
			// PDLGrammar.g:100:7: '|' s1= set '|' '%' n= INT '>' m= INT
			{
			DebugLocation(100, 7);
			Match(input,64,Follow._64_in_synpred16_PDLGrammar486); if (state.failed) return;
			DebugLocation(100, 13);
			PushFollow(Follow._set_in_synpred16_PDLGrammar490);
			s1=set();
			PopFollow();
			if (state.failed) return;
			DebugLocation(100, 18);
			Match(input,64,Follow._64_in_synpred16_PDLGrammar492); if (state.failed) return;
			DebugLocation(100, 22);
			Match(input,11,Follow._11_in_synpred16_PDLGrammar494); if (state.failed) return;
			DebugLocation(100, 27);
			n=(IToken)Match(input,INT,Follow._INT_in_synpred16_PDLGrammar498); if (state.failed) return;
			DebugLocation(100, 32);
			Match(input,24,Follow._24_in_synpred16_PDLGrammar500); if (state.failed) return;
			DebugLocation(100, 37);
			m=(IToken)Match(input,INT,Follow._INT_in_synpred16_PDLGrammar504); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_PDLGrammar_fragment", 20);
			LeaveRule("synpred16_PDLGrammar_fragment", 20);
			LeaveRule_synpred16_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred16_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred17_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred17_PDLGrammar_fragment() {}

	// $ANTLR start synpred17_PDLGrammar
	private void synpred17_PDLGrammar_fragment()
	{
		IToken n = default(IToken);
		IToken m = default(IToken);
		PDLSet s1 = default(PDLSet);

		EnterRule_synpred17_PDLGrammar_fragment();
		EnterRule("synpred17_PDLGrammar_fragment", 21);
		TraceIn("synpred17_PDLGrammar_fragment", 21);
		try
		{
			// PDLGrammar.g:101:7: ( '|' s1= set '|' '%' n= INT '>=' m= INT )
			DebugEnterAlt(1);
			// PDLGrammar.g:101:7: '|' s1= set '|' '%' n= INT '>=' m= INT
			{
			DebugLocation(101, 7);
			Match(input,64,Follow._64_in_synpred17_PDLGrammar531); if (state.failed) return;
			DebugLocation(101, 13);
			PushFollow(Follow._set_in_synpred17_PDLGrammar535);
			s1=set();
			PopFollow();
			if (state.failed) return;
			DebugLocation(101, 18);
			Match(input,64,Follow._64_in_synpred17_PDLGrammar537); if (state.failed) return;
			DebugLocation(101, 22);
			Match(input,11,Follow._11_in_synpred17_PDLGrammar539); if (state.failed) return;
			DebugLocation(101, 27);
			n=(IToken)Match(input,INT,Follow._INT_in_synpred17_PDLGrammar543); if (state.failed) return;
			DebugLocation(101, 32);
			Match(input,25,Follow._25_in_synpred17_PDLGrammar545); if (state.failed) return;
			DebugLocation(101, 38);
			m=(IToken)Match(input,INT,Follow._INT_in_synpred17_PDLGrammar549); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred17_PDLGrammar_fragment", 21);
			LeaveRule("synpred17_PDLGrammar_fragment", 21);
			LeaveRule_synpred17_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred17_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred19_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred19_PDLGrammar_fragment() {}

	// $ANTLR start synpred19_PDLGrammar
	private void synpred19_PDLGrammar_fragment()
	{
		IToken m = default(IToken);
		PDLSet s1 = default(PDLSet);

		EnterRule_synpred19_PDLGrammar_fragment();
		EnterRule("synpred19_PDLGrammar_fragment", 23);
		TraceIn("synpred19_PDLGrammar_fragment", 23);
		try
		{
			// PDLGrammar.g:102:7: ( '|' s1= set '|' ( '=' | '==' ) m= INT )
			DebugEnterAlt(1);
			// PDLGrammar.g:102:7: '|' s1= set '|' ( '=' | '==' ) m= INT
			{
			DebugLocation(102, 7);
			Match(input,64,Follow._64_in_synpred19_PDLGrammar588); if (state.failed) return;
			DebugLocation(102, 13);
			PushFollow(Follow._set_in_synpred19_PDLGrammar592);
			s1=set();
			PopFollow();
			if (state.failed) return;
			DebugLocation(102, 18);
			Match(input,64,Follow._64_in_synpred19_PDLGrammar594); if (state.failed) return;
			DebugLocation(102, 22);
			if ((input.LA(1)>=22 && input.LA(1)<=23))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(102, 35);
			m=(IToken)Match(input,INT,Follow._INT_in_synpred19_PDLGrammar605); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred19_PDLGrammar_fragment", 23);
			LeaveRule("synpred19_PDLGrammar_fragment", 23);
			LeaveRule_synpred19_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred19_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred20_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred20_PDLGrammar_fragment() {}

	// $ANTLR start synpred20_PDLGrammar
	private void synpred20_PDLGrammar_fragment()
	{
		IToken m = default(IToken);
		PDLSet s1 = default(PDLSet);

		EnterRule_synpred20_PDLGrammar_fragment();
		EnterRule("synpred20_PDLGrammar_fragment", 24);
		TraceIn("synpred20_PDLGrammar_fragment", 24);
		try
		{
			// PDLGrammar.g:103:7: ( '|' s1= set '|' '<=' m= INT )
			DebugEnterAlt(1);
			// PDLGrammar.g:103:7: '|' s1= set '|' '<=' m= INT
			{
			DebugLocation(103, 7);
			Match(input,64,Follow._64_in_synpred20_PDLGrammar628); if (state.failed) return;
			DebugLocation(103, 13);
			PushFollow(Follow._set_in_synpred20_PDLGrammar632);
			s1=set();
			PopFollow();
			if (state.failed) return;
			DebugLocation(103, 18);
			Match(input,64,Follow._64_in_synpred20_PDLGrammar634); if (state.failed) return;
			DebugLocation(103, 22);
			Match(input,21,Follow._21_in_synpred20_PDLGrammar636); if (state.failed) return;
			DebugLocation(103, 28);
			m=(IToken)Match(input,INT,Follow._INT_in_synpred20_PDLGrammar640); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred20_PDLGrammar_fragment", 24);
			LeaveRule("synpred20_PDLGrammar_fragment", 24);
			LeaveRule_synpred20_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred20_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred21_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred21_PDLGrammar_fragment() {}

	// $ANTLR start synpred21_PDLGrammar
	private void synpred21_PDLGrammar_fragment()
	{
		IToken m = default(IToken);
		PDLSet s1 = default(PDLSet);

		EnterRule_synpred21_PDLGrammar_fragment();
		EnterRule("synpred21_PDLGrammar_fragment", 25);
		TraceIn("synpred21_PDLGrammar_fragment", 25);
		try
		{
			// PDLGrammar.g:104:7: ( '|' s1= set '|' '<' m= INT )
			DebugEnterAlt(1);
			// PDLGrammar.g:104:7: '|' s1= set '|' '<' m= INT
			{
			DebugLocation(104, 7);
			Match(input,64,Follow._64_in_synpred21_PDLGrammar667); if (state.failed) return;
			DebugLocation(104, 13);
			PushFollow(Follow._set_in_synpred21_PDLGrammar671);
			s1=set();
			PopFollow();
			if (state.failed) return;
			DebugLocation(104, 18);
			Match(input,64,Follow._64_in_synpred21_PDLGrammar673); if (state.failed) return;
			DebugLocation(104, 22);
			Match(input,19,Follow._19_in_synpred21_PDLGrammar675); if (state.failed) return;
			DebugLocation(104, 27);
			m=(IToken)Match(input,INT,Follow._INT_in_synpred21_PDLGrammar679); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred21_PDLGrammar_fragment", 25);
			LeaveRule("synpred21_PDLGrammar_fragment", 25);
			LeaveRule_synpred21_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred21_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred22_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred22_PDLGrammar_fragment() {}

	// $ANTLR start synpred22_PDLGrammar
	private void synpred22_PDLGrammar_fragment()
	{
		IToken m = default(IToken);
		PDLSet s1 = default(PDLSet);

		EnterRule_synpred22_PDLGrammar_fragment();
		EnterRule("synpred22_PDLGrammar_fragment", 26);
		TraceIn("synpred22_PDLGrammar_fragment", 26);
		try
		{
			// PDLGrammar.g:105:7: ( '|' s1= set '|' '>' m= INT )
			DebugEnterAlt(1);
			// PDLGrammar.g:105:7: '|' s1= set '|' '>' m= INT
			{
			DebugLocation(105, 7);
			Match(input,64,Follow._64_in_synpred22_PDLGrammar706); if (state.failed) return;
			DebugLocation(105, 13);
			PushFollow(Follow._set_in_synpred22_PDLGrammar710);
			s1=set();
			PopFollow();
			if (state.failed) return;
			DebugLocation(105, 18);
			Match(input,64,Follow._64_in_synpred22_PDLGrammar712); if (state.failed) return;
			DebugLocation(105, 22);
			Match(input,24,Follow._24_in_synpred22_PDLGrammar714); if (state.failed) return;
			DebugLocation(105, 27);
			m=(IToken)Match(input,INT,Follow._INT_in_synpred22_PDLGrammar718); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred22_PDLGrammar_fragment", 26);
			LeaveRule("synpred22_PDLGrammar_fragment", 26);
			LeaveRule_synpred22_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred22_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred23_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred23_PDLGrammar_fragment() {}

	// $ANTLR start synpred23_PDLGrammar
	private void synpred23_PDLGrammar_fragment()
	{
		IToken m = default(IToken);
		PDLSet s1 = default(PDLSet);

		EnterRule_synpred23_PDLGrammar_fragment();
		EnterRule("synpred23_PDLGrammar_fragment", 27);
		TraceIn("synpred23_PDLGrammar_fragment", 27);
		try
		{
			// PDLGrammar.g:106:7: ( '|' s1= set '|' '>=' m= INT )
			DebugEnterAlt(1);
			// PDLGrammar.g:106:7: '|' s1= set '|' '>=' m= INT
			{
			DebugLocation(106, 7);
			Match(input,64,Follow._64_in_synpred23_PDLGrammar745); if (state.failed) return;
			DebugLocation(106, 13);
			PushFollow(Follow._set_in_synpred23_PDLGrammar749);
			s1=set();
			PopFollow();
			if (state.failed) return;
			DebugLocation(106, 18);
			Match(input,64,Follow._64_in_synpred23_PDLGrammar751); if (state.failed) return;
			DebugLocation(106, 22);
			Match(input,25,Follow._25_in_synpred23_PDLGrammar753); if (state.failed) return;
			DebugLocation(106, 28);
			m=(IToken)Match(input,INT,Follow._INT_in_synpred23_PDLGrammar757); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred23_PDLGrammar_fragment", 27);
			LeaveRule("synpred23_PDLGrammar_fragment", 27);
			LeaveRule_synpred23_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred23_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred31_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred31_PDLGrammar_fragment() {}

	// $ANTLR start synpred31_PDLGrammar
	private void synpred31_PDLGrammar_fragment()
	{
		PDLPred phi1 = default(PDLPred);
		PDLPred phi2 = default(PDLPred);

		EnterRule_synpred31_PDLGrammar_fragment();
		EnterRule("synpred31_PDLGrammar_fragment", 35);
		TraceIn("synpred31_PDLGrammar_fragment", 35);
		try
		{
			// PDLGrammar.g:111:7: ( '(' phi1= pred ( '&' | 'and' ) phi2= pred ')' )
			DebugEnterAlt(1);
			// PDLGrammar.g:111:7: '(' phi1= pred ( '&' | 'and' ) phi2= pred ')'
			{
			DebugLocation(111, 7);
			Match(input,13,Follow._13_in_synpred31_PDLGrammar905); if (state.failed) return;
			DebugLocation(111, 14);
			PushFollow(Follow._pred_in_synpred31_PDLGrammar908);
			phi1=pred();
			PopFollow();
			if (state.failed) return;
			DebugLocation(111, 20);
			if (input.LA(1)==12||input.LA(1)==42)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(111, 36);
			PushFollow(Follow._pred_in_synpred31_PDLGrammar918);
			phi2=pred();
			PopFollow();
			if (state.failed) return;
			DebugLocation(111, 41);
			Match(input,14,Follow._14_in_synpred31_PDLGrammar919); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred31_PDLGrammar_fragment", 35);
			LeaveRule("synpred31_PDLGrammar_fragment", 35);
			LeaveRule_synpred31_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred31_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred34_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred34_PDLGrammar_fragment() {}

	// $ANTLR start synpred34_PDLGrammar
	private void synpred34_PDLGrammar_fragment()
	{
		PDLPred phi1 = default(PDLPred);
		PDLPred phi2 = default(PDLPred);

		EnterRule_synpred34_PDLGrammar_fragment();
		EnterRule("synpred34_PDLGrammar_fragment", 38);
		TraceIn("synpred34_PDLGrammar_fragment", 38);
		try
		{
			// PDLGrammar.g:112:7: ( '(' phi1= pred ( 'V' | '|' | 'or' ) phi2= pred ')' )
			DebugEnterAlt(1);
			// PDLGrammar.g:112:7: '(' phi1= pred ( 'V' | '|' | 'or' ) phi2= pred ')'
			{
			DebugLocation(112, 7);
			Match(input,13,Follow._13_in_synpred34_PDLGrammar942); if (state.failed) return;
			DebugLocation(112, 14);
			PushFollow(Follow._pred_in_synpred34_PDLGrammar945);
			phi1=pred();
			PopFollow();
			if (state.failed) return;
			DebugLocation(112, 20);
			if (input.LA(1)==32||input.LA(1)==59||input.LA(1)==64)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(112, 39);
			PushFollow(Follow._pred_in_synpred34_PDLGrammar957);
			phi2=pred();
			PopFollow();
			if (state.failed) return;
			DebugLocation(112, 44);
			Match(input,14,Follow._14_in_synpred34_PDLGrammar958); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred34_PDLGrammar_fragment", 38);
			LeaveRule("synpred34_PDLGrammar_fragment", 38);
			LeaveRule_synpred34_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred34_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred36_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred36_PDLGrammar_fragment() {}

	// $ANTLR start synpred36_PDLGrammar
	private void synpred36_PDLGrammar_fragment()
	{
		PDLPred phi1 = default(PDLPred);
		PDLPred phi2 = default(PDLPred);

		EnterRule_synpred36_PDLGrammar_fragment();
		EnterRule("synpred36_PDLGrammar_fragment", 40);
		TraceIn("synpred36_PDLGrammar_fragment", 40);
		try
		{
			// PDLGrammar.g:113:7: ( '(' phi1= pred ( '->' | '-->' ) phi2= pred ')' )
			DebugEnterAlt(1);
			// PDLGrammar.g:113:7: '(' phi1= pred ( '->' | '-->' ) phi2= pred ')'
			{
			DebugLocation(113, 7);
			Match(input,13,Follow._13_in_synpred36_PDLGrammar985); if (state.failed) return;
			DebugLocation(113, 14);
			PushFollow(Follow._pred_in_synpred36_PDLGrammar988);
			phi1=pred();
			PopFollow();
			if (state.failed) return;
			DebugLocation(113, 20);
			if ((input.LA(1)>=16 && input.LA(1)<=17))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(113, 37);
			PushFollow(Follow._pred_in_synpred36_PDLGrammar998);
			phi2=pred();
			PopFollow();
			if (state.failed) return;
			DebugLocation(113, 42);
			Match(input,14,Follow._14_in_synpred36_PDLGrammar999); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred36_PDLGrammar_fragment", 40);
			LeaveRule("synpred36_PDLGrammar_fragment", 40);
			LeaveRule_synpred36_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred36_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred37_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred37_PDLGrammar_fragment() {}

	// $ANTLR start synpred37_PDLGrammar
	private void synpred37_PDLGrammar_fragment()
	{
		PDLPred phi1 = default(PDLPred);
		PDLPred phi2 = default(PDLPred);

		EnterRule_synpred37_PDLGrammar_fragment();
		EnterRule("synpred37_PDLGrammar_fragment", 41);
		TraceIn("synpred37_PDLGrammar_fragment", 41);
		try
		{
			// PDLGrammar.g:114:7: ( '(' phi1= pred '<->' phi2= pred ')' )
			DebugEnterAlt(1);
			// PDLGrammar.g:114:7: '(' phi1= pred '<->' phi2= pred ')'
			{
			DebugLocation(114, 7);
			Match(input,13,Follow._13_in_synpred37_PDLGrammar1026); if (state.failed) return;
			DebugLocation(114, 14);
			PushFollow(Follow._pred_in_synpred37_PDLGrammar1029);
			phi1=pred();
			PopFollow();
			if (state.failed) return;
			DebugLocation(114, 20);
			Match(input,20,Follow._20_in_synpred37_PDLGrammar1031); if (state.failed) return;
			DebugLocation(114, 30);
			PushFollow(Follow._pred_in_synpred37_PDLGrammar1035);
			phi2=pred();
			PopFollow();
			if (state.failed) return;
			DebugLocation(114, 35);
			Match(input,14,Follow._14_in_synpred37_PDLGrammar1036); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred37_PDLGrammar_fragment", 41);
			LeaveRule("synpred37_PDLGrammar_fragment", 41);
			LeaveRule_synpred37_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred37_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred68_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred68_PDLGrammar_fragment() {}

	// $ANTLR start synpred68_PDLGrammar
	private void synpred68_PDLGrammar_fragment()
	{
		PDLSet s1 = default(PDLSet);
		PDLSet s2 = default(PDLSet);

		EnterRule_synpred68_PDLGrammar_fragment();
		EnterRule("synpred68_PDLGrammar_fragment", 72);
		TraceIn("synpred68_PDLGrammar_fragment", 72);
		try
		{
			// PDLGrammar.g:145:7: ( '(' s1= set ( 'inters' ) s2= set ')' )
			DebugEnterAlt(1);
			// PDLGrammar.g:145:7: '(' s1= set ( 'inters' ) s2= set ')'
			{
			DebugLocation(145, 7);
			Match(input,13,Follow._13_in_synpred68_PDLGrammar1659); if (state.failed) return;
			DebugLocation(145, 13);
			PushFollow(Follow._set_in_synpred68_PDLGrammar1663);
			s1=set();
			PopFollow();
			if (state.failed) return;
			DebugLocation(145, 18);
			// PDLGrammar.g:145:18: ( 'inters' )
			DebugEnterAlt(1);
			// PDLGrammar.g:145:19: 'inters'
			{
			DebugLocation(145, 19);
			Match(input,54,Follow._54_in_synpred68_PDLGrammar1666); if (state.failed) return;

			}

			DebugLocation(145, 31);
			PushFollow(Follow._set_in_synpred68_PDLGrammar1671);
			s2=set();
			PopFollow();
			if (state.failed) return;
			DebugLocation(145, 35);
			Match(input,14,Follow._14_in_synpred68_PDLGrammar1672); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred68_PDLGrammar_fragment", 72);
			LeaveRule("synpred68_PDLGrammar_fragment", 72);
			LeaveRule_synpred68_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred68_PDLGrammar
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred70_PDLGrammar_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred70_PDLGrammar_fragment() {}

	// $ANTLR start synpred70_PDLGrammar
	private void synpred70_PDLGrammar_fragment()
	{
		PDLSet s1 = default(PDLSet);
		PDLSet s2 = default(PDLSet);

		EnterRule_synpred70_PDLGrammar_fragment();
		EnterRule("synpred70_PDLGrammar_fragment", 74);
		TraceIn("synpred70_PDLGrammar_fragment", 74);
		try
		{
			// PDLGrammar.g:146:7: ( '(' s1= set ( 'union' | 'U' ) s2= set ')' )
			DebugEnterAlt(1);
			// PDLGrammar.g:146:7: '(' s1= set ( 'union' | 'U' ) s2= set ')'
			{
			DebugLocation(146, 7);
			Match(input,13,Follow._13_in_synpred70_PDLGrammar1688); if (state.failed) return;
			DebugLocation(146, 13);
			PushFollow(Follow._set_in_synpred70_PDLGrammar1692);
			s1=set();
			PopFollow();
			if (state.failed) return;
			DebugLocation(146, 18);
			if (input.LA(1)==31||input.LA(1)==62)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(146, 34);
			PushFollow(Follow._set_in_synpred70_PDLGrammar1702);
			s2=set();
			PopFollow();
			if (state.failed) return;
			DebugLocation(146, 38);
			Match(input,14,Follow._14_in_synpred70_PDLGrammar1703); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred70_PDLGrammar_fragment", 74);
			LeaveRule("synpred70_PDLGrammar_fragment", 74);
			LeaveRule_synpred70_PDLGrammar_fragment();
		}
	}
	// $ANTLR end synpred70_PDLGrammar
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _pred_in_parse80 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse82 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_in_pred105 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_pred107 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_pred111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_in_pred122 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_pred124 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_pred128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _position_in_pred140 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_pred142 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_pred146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _position_in_pred158 = new BitSet(new ulong[]{0xC00000UL});
		public static readonly BitSet _set_in_pred160 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_pred169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _position_in_pred181 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _21_in_pred183 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_pred187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _position_in_pred199 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_pred201 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_pred205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _position_in_pred217 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_pred219 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_pred223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _position_in_pred243 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_pred245 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_pred249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _28_in_pred271 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_pred273 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_pred277 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_pred279 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_pred283 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_pred285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _27_in_pred307 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_pred309 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_pred313 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_pred315 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_pred319 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_pred321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_pred351 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_pred355 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_pred357 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _11_in_pred359 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred363 = new BitSet(new ulong[]{0xC00000UL});
		public static readonly BitSet _set_in_pred365 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_pred396 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_pred400 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_pred402 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _11_in_pred404 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred408 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _21_in_pred410 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_pred441 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_pred445 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_pred447 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _11_in_pred449 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred453 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_pred455 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_pred486 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_pred490 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_pred492 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _11_in_pred494 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred498 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_pred500 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_pred531 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_pred535 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_pred537 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _11_in_pred539 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred543 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_pred545 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_pred588 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_pred592 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_pred594 = new BitSet(new ulong[]{0xC00000UL});
		public static readonly BitSet _set_in_pred596 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_pred628 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_pred632 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_pred634 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _21_in_pred636 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_pred667 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_pred671 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_pred673 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_pred675 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_pred706 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_pred710 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_pred712 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_pred714 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_pred745 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_pred749 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_pred751 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_pred753 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_pred757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_pred773 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _FOVARIABLE_in_pred781 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_pred783 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_pred787 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_pred806 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _FOVARIABLE_in_pred816 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_pred818 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_pred822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _36_in_pred834 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _SOVARIABLE_in_pred838 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_pred840 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_pred844 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _49_in_pred863 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _SOVARIABLE_in_pred867 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_pred869 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_pred873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_pred905 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_pred908 = new BitSet(new ulong[]{0x40000001000UL});
		public static readonly BitSet _set_in_pred910 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_pred918 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_pred919 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_pred942 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_pred945 = new BitSet(new ulong[]{0x800000100000000UL,0x1UL});
		public static readonly BitSet _set_in_pred947 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_pred957 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_pred958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_pred985 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_pred988 = new BitSet(new ulong[]{0x30000UL});
		public static readonly BitSet _set_in_pred990 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_pred998 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_pred999 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_pred1026 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_pred1029 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _20_in_pred1031 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_pred1035 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_pred1036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_pred1071 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_pred1079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_pred1098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_pred1117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _60_in_pred1140 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_pred1142 = new BitSet(new ulong[]{0x110UL});
		public static readonly BitSet _set_in_pred1146 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_pred1154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_pred1173 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_pred1175 = new BitSet(new ulong[]{0x110UL});
		public static readonly BitSet _set_in_pred1179 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_pred1187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_pred1202 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_pred1204 = new BitSet(new ulong[]{0x110UL});
		public static readonly BitSet _set_in_pred1208 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_pred1216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_pred1235 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_pred1237 = new BitSet(new ulong[]{0x110UL});
		public static readonly BitSet _set_in_pred1241 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_pred1249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _45_in_pred1259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_pred1275 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_pred1279 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_pred1281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOVARIABLE_in_position1306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_position1316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_position1327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_position1342 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_position1344 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_position1348 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_position1350 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _29_in_position1369 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_position1371 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_position1375 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_position1377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_position1391 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_position1393 = new BitSet(new ulong[]{0x110UL});
		public static readonly BitSet _set_in_position1397 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_position1405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_position1419 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_position1421 = new BitSet(new ulong[]{0x110UL});
		public static readonly BitSet _set_in_position1425 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_position1433 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_position1448 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_position1452 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_position1454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SOVARIABLE_in_set1490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_set1501 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_set1503 = new BitSet(new ulong[]{0x110UL});
		public static readonly BitSet _set_in_set1507 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_set1515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _40_in_set1528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _38_in_set1545 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_set1549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _37_in_set1569 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_set1573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _41_in_set1597 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_set1601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_set1621 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_set1625 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_set1659 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_set1663 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_set1666 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_set1671 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_set1672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_set1688 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_set1692 = new BitSet(new ulong[]{0x4000000080000000UL});
		public static readonly BitSet _set_in_set1694 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_set1702 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_set1703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_set1723 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _FOVARIABLE_in_set1727 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_set1729 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_set1733 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _65_in_set1734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_set1748 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_set1752 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_set1754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_in_synpred1_PDLGrammar105 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_synpred1_PDLGrammar107 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_synpred1_PDLGrammar111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_in_synpred2_PDLGrammar122 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_synpred2_PDLGrammar124 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred2_PDLGrammar128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _position_in_synpred3_PDLGrammar140 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_synpred3_PDLGrammar142 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred3_PDLGrammar146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _position_in_synpred5_PDLGrammar158 = new BitSet(new ulong[]{0xC00000UL});
		public static readonly BitSet _set_in_synpred5_PDLGrammar160 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_synpred5_PDLGrammar169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _position_in_synpred6_PDLGrammar181 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _21_in_synpred6_PDLGrammar183 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_synpred6_PDLGrammar187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _position_in_synpred7_PDLGrammar199 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_synpred7_PDLGrammar201 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_synpred7_PDLGrammar205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _position_in_synpred8_PDLGrammar217 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_synpred8_PDLGrammar219 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_synpred8_PDLGrammar223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _position_in_synpred9_PDLGrammar243 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_synpred9_PDLGrammar245 = new BitSet(new ulong[]{0x318000060002020UL});
		public static readonly BitSet _position_in_synpred9_PDLGrammar249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_synpred13_PDLGrammar351 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred13_PDLGrammar355 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_synpred13_PDLGrammar357 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _11_in_synpred13_PDLGrammar359 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred13_PDLGrammar363 = new BitSet(new ulong[]{0xC00000UL});
		public static readonly BitSet _set_in_synpred13_PDLGrammar365 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred13_PDLGrammar374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_synpred14_PDLGrammar396 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred14_PDLGrammar400 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_synpred14_PDLGrammar402 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _11_in_synpred14_PDLGrammar404 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred14_PDLGrammar408 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _21_in_synpred14_PDLGrammar410 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred14_PDLGrammar414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_synpred15_PDLGrammar441 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred15_PDLGrammar445 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_synpred15_PDLGrammar447 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _11_in_synpred15_PDLGrammar449 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred15_PDLGrammar453 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_synpred15_PDLGrammar455 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred15_PDLGrammar459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_synpred16_PDLGrammar486 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred16_PDLGrammar490 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_synpred16_PDLGrammar492 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _11_in_synpred16_PDLGrammar494 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred16_PDLGrammar498 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_synpred16_PDLGrammar500 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred16_PDLGrammar504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_synpred17_PDLGrammar531 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred17_PDLGrammar535 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_synpred17_PDLGrammar537 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _11_in_synpred17_PDLGrammar539 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred17_PDLGrammar543 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_synpred17_PDLGrammar545 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred17_PDLGrammar549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_synpred19_PDLGrammar588 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred19_PDLGrammar592 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_synpred19_PDLGrammar594 = new BitSet(new ulong[]{0xC00000UL});
		public static readonly BitSet _set_in_synpred19_PDLGrammar596 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred19_PDLGrammar605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_synpred20_PDLGrammar628 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred20_PDLGrammar632 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_synpred20_PDLGrammar634 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _21_in_synpred20_PDLGrammar636 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred20_PDLGrammar640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_synpred21_PDLGrammar667 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred21_PDLGrammar671 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_synpred21_PDLGrammar673 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_synpred21_PDLGrammar675 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred21_PDLGrammar679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_synpred22_PDLGrammar706 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred22_PDLGrammar710 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_synpred22_PDLGrammar712 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_synpred22_PDLGrammar714 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred22_PDLGrammar718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_synpred23_PDLGrammar745 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred23_PDLGrammar749 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_synpred23_PDLGrammar751 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_synpred23_PDLGrammar753 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _INT_in_synpred23_PDLGrammar757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_synpred31_PDLGrammar905 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_synpred31_PDLGrammar908 = new BitSet(new ulong[]{0x40000001000UL});
		public static readonly BitSet _set_in_synpred31_PDLGrammar910 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_synpred31_PDLGrammar918 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_synpred31_PDLGrammar919 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_synpred34_PDLGrammar942 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_synpred34_PDLGrammar945 = new BitSet(new ulong[]{0x800000100000000UL,0x1UL});
		public static readonly BitSet _set_in_synpred34_PDLGrammar947 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_synpred34_PDLGrammar957 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_synpred34_PDLGrammar958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_synpred36_PDLGrammar985 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_synpred36_PDLGrammar988 = new BitSet(new ulong[]{0x30000UL});
		public static readonly BitSet _set_in_synpred36_PDLGrammar990 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_synpred36_PDLGrammar998 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_synpred36_PDLGrammar999 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_synpred37_PDLGrammar1026 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_synpred37_PDLGrammar1029 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _20_in_synpred37_PDLGrammar1031 = new BitSet(new ulong[]{0x379FF01C78002430UL,0x1UL});
		public static readonly BitSet _pred_in_synpred37_PDLGrammar1035 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_synpred37_PDLGrammar1036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_synpred68_PDLGrammar1659 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred68_PDLGrammar1663 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_synpred68_PDLGrammar1666 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred68_PDLGrammar1671 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_synpred68_PDLGrammar1672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_synpred70_PDLGrammar1688 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred70_PDLGrammar1692 = new BitSet(new ulong[]{0x4000000080000000UL});
		public static readonly BitSet _set_in_synpred70_PDLGrammar1694 = new BitSet(new ulong[]{0x802003E000002080UL});
		public static readonly BitSet _set_in_synpred70_PDLGrammar1702 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_synpred70_PDLGrammar1703 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  AutomataPDL.Parse 
