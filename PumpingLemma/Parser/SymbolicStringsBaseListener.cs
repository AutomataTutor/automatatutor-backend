//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SymbolicStrings.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591




using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ISymbolicStringsListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class SymbolicStringsBaseListener : ISymbolicStringsListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SymbolicStringsParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm([NotNull] SymbolicStringsParser.TermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SymbolicStringsParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm([NotNull] SymbolicStringsParser.TermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SymbolicStringsParser.terms"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerms([NotNull] SymbolicStringsParser.TermsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SymbolicStringsParser.terms"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerms([NotNull] SymbolicStringsParser.TermsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SymbolicStringsParser.integer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInteger([NotNull] SymbolicStringsParser.IntegerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SymbolicStringsParser.integer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInteger([NotNull] SymbolicStringsParser.IntegerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SymbolicStringsParser.word"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWord([NotNull] SymbolicStringsParser.WordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SymbolicStringsParser.word"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWord([NotNull] SymbolicStringsParser.WordContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SymbolicStringsParser.symbolic_string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSymbolic_string([NotNull] SymbolicStringsParser.Symbolic_stringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SymbolicStringsParser.symbolic_string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSymbolic_string([NotNull] SymbolicStringsParser.Symbolic_stringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SymbolicStringsParser.symbolic_string_h"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSymbolic_string_h([NotNull] SymbolicStringsParser.Symbolic_string_hContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SymbolicStringsParser.symbolic_string_h"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSymbolic_string_h([NotNull] SymbolicStringsParser.Symbolic_string_hContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SymbolicStringsParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondition([NotNull] SymbolicStringsParser.ConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SymbolicStringsParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondition([NotNull] SymbolicStringsParser.ConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SymbolicStringsParser.condition_h"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondition_h([NotNull] SymbolicStringsParser.Condition_hContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SymbolicStringsParser.condition_h"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondition_h([NotNull] SymbolicStringsParser.Condition_hContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SymbolicStringsParser.atomic_condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtomic_condition([NotNull] SymbolicStringsParser.Atomic_conditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SymbolicStringsParser.atomic_condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtomic_condition([NotNull] SymbolicStringsParser.Atomic_conditionContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
