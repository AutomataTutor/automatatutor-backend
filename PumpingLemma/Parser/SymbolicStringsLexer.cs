//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SymbolicStrings.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class SymbolicStringsLexer : Lexer {
	public const int
		WS=1, LPAREN=2, RPAREN=3, REPEAT=4, TIMES=5, PLUS=6, AND=7, OR=8, NOT=9, 
		GEQ=10, LEQ=11, NEQ=12, GT=13, LT=14, EQ=15, IDENT=16, INT=17, INVALID=18;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WS", "LPAREN", "RPAREN", "REPEAT", "TIMES", "PLUS", "AND", "OR", "NOT", 
		"GEQ", "LEQ", "NEQ", "GT", "LT", "EQ", "IDENT", "INT", "INVALID"
	};


	public SymbolicStringsLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'('", "')'", "'^'", "'*'", "'+'", "'&&'", "'||'", "'!'", 
		"'>='", "'<='", "'!='", "'>'", "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "LPAREN", "RPAREN", "REPEAT", "TIMES", "PLUS", "AND", "OR", 
		"NOT", "GEQ", "LEQ", "NEQ", "GT", "LT", "EQ", "IDENT", "INT", "INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SymbolicStrings.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x14]\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3"+
		"\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3"+
		"\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x5\x10N\n\x10\x3\x11\x3"+
		"\x11\a\x11R\n\x11\f\x11\xE\x11U\v\x11\x3\x12\x6\x12X\n\x12\r\x12\xE\x12"+
		"Y\x3\x13\x3\x13\x2\x2\x14\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13"+
		"\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\x3\x2\x6\x5"+
		"\x2\f\f\xF\xF\"\"\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63"+
		"|\x3\x2\x32;_\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2"+
		"\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2"+
		"\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2"+
		"\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3"+
		"\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x3\'\x3\x2\x2"+
		"\x2\x5+\x3\x2\x2\x2\a-\x3\x2\x2\x2\t/\x3\x2\x2\x2\v\x31\x3\x2\x2\x2\r"+
		"\x33\x3\x2\x2\x2\xF\x35\x3\x2\x2\x2\x11\x38\x3\x2\x2\x2\x13;\x3\x2\x2"+
		"\x2\x15=\x3\x2\x2\x2\x17@\x3\x2\x2\x2\x19\x43\x3\x2\x2\x2\x1B\x46\x3\x2"+
		"\x2\x2\x1DH\x3\x2\x2\x2\x1FM\x3\x2\x2\x2!O\x3\x2\x2\x2#W\x3\x2\x2\x2%"+
		"[\x3\x2\x2\x2\'(\t\x2\x2\x2()\x3\x2\x2\x2)*\b\x2\x2\x2*\x4\x3\x2\x2\x2"+
		"+,\a*\x2\x2,\x6\x3\x2\x2\x2-.\a+\x2\x2.\b\x3\x2\x2\x2/\x30\a`\x2\x2\x30"+
		"\n\x3\x2\x2\x2\x31\x32\a,\x2\x2\x32\f\x3\x2\x2\x2\x33\x34\a-\x2\x2\x34"+
		"\xE\x3\x2\x2\x2\x35\x36\a(\x2\x2\x36\x37\a(\x2\x2\x37\x10\x3\x2\x2\x2"+
		"\x38\x39\a~\x2\x2\x39:\a~\x2\x2:\x12\x3\x2\x2\x2;<\a#\x2\x2<\x14\x3\x2"+
		"\x2\x2=>\a@\x2\x2>?\a?\x2\x2?\x16\x3\x2\x2\x2@\x41\a>\x2\x2\x41\x42\a"+
		"?\x2\x2\x42\x18\x3\x2\x2\x2\x43\x44\a#\x2\x2\x44\x45\a?\x2\x2\x45\x1A"+
		"\x3\x2\x2\x2\x46G\a@\x2\x2G\x1C\x3\x2\x2\x2HI\a>\x2\x2I\x1E\x3\x2\x2\x2"+
		"JK\a?\x2\x2KN\a?\x2\x2LN\a?\x2\x2MJ\x3\x2\x2\x2ML\x3\x2\x2\x2N \x3\x2"+
		"\x2\x2OS\t\x3\x2\x2PR\t\x4\x2\x2QP\x3\x2\x2\x2RU\x3\x2\x2\x2SQ\x3\x2\x2"+
		"\x2ST\x3\x2\x2\x2T\"\x3\x2\x2\x2US\x3\x2\x2\x2VX\t\x5\x2\x2WV\x3\x2\x2"+
		"\x2XY\x3\x2\x2\x2YW\x3\x2\x2\x2YZ\x3\x2\x2\x2Z$\x3\x2\x2\x2[\\\v\x2\x2"+
		"\x2\\&\x3\x2\x2\x2\x6\x2MSY\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
