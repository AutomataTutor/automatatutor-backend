//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SymbolicStrings.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591



using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class SymbolicStringsParser : Parser {
	public const int
		WS=1, LPAREN=2, RPAREN=3, REPEAT=4, TIMES=5, PLUS=6, AND=7, OR=8, NOT=9, 
		GEQ=10, LEQ=11, NEQ=12, GT=13, LT=14, EQ=15, IDENT=16, INT=17, INVALID=18;
	public const int
		RULE_term = 0, RULE_terms = 1, RULE_integer = 2, RULE_word = 3, RULE_symbolic_string = 4, 
		RULE_symbolic_string_h = 5, RULE_condition = 6, RULE_condition_h = 7, 
		RULE_atomic_condition = 8;
	public static readonly string[] ruleNames = {
		"term", "terms", "integer", "word", "symbolic_string", "symbolic_string_h", 
		"condition", "condition_h", "atomic_condition"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'('", "')'", "'^'", "'*'", "'+'", "'&&'", "'||'", "'!'", 
		"'>='", "'<='", "'!='", "'>'", "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "LPAREN", "RPAREN", "REPEAT", "TIMES", "PLUS", "AND", "OR", 
		"NOT", "GEQ", "LEQ", "NEQ", "GT", "LT", "EQ", "IDENT", "INT", "INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SymbolicStrings.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }



	// To check appearing identifiers
	public List<String> alphabet;
	public Dictionary<String, List<String>> word_map = new Dictionary<String, List<String>>();
	public String word_error = null;



	public SymbolicStringsParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class TermContext : ParserRuleContext {
		public PumpingLemma.LinearIntegerExpression value =  null;
		public IToken _INT;
		public IToken _IDENT;
		public TermsContext a;
		public ITerminalNode INT() { return GetToken(SymbolicStringsParser.INT, 0); }
		public ITerminalNode IDENT() { return GetToken(SymbolicStringsParser.IDENT, 0); }
		public ITerminalNode TIMES() { return GetToken(SymbolicStringsParser.TIMES, 0); }
		public ITerminalNode LPAREN() { return GetToken(SymbolicStringsParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(SymbolicStringsParser.RPAREN, 0); }
		public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 0, RULE_term);
		try {
			State = 35;
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18; _localctx._INT = Match(INT);
				 _localctx.value =  PumpingLemma.LinearIntegerExpression.Constant((_localctx._INT!=null?int.Parse(_localctx._INT.Text):0)); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 20; _localctx._IDENT = Match(IDENT);
				 
						_localctx.value =  PumpingLemma.LinearIntegerExpression.Variable((_localctx._IDENT!=null?_localctx._IDENT.Text:null));
						
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 22; _localctx._INT = Match(INT);
				State = 23; Match(TIMES);
				State = 24; _localctx._IDENT = Match(IDENT);
				 
						_localctx.value =  PumpingLemma.LinearIntegerExpression.SingleTerm(
							(_localctx._INT!=null?int.Parse(_localctx._INT.Text):0),
							PumpingLemma.VariableType.Variable((_localctx._IDENT!=null?_localctx._IDENT.Text:null))
							);
						
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 26; _localctx._IDENT = Match(IDENT);
				State = 27; Match(TIMES);
				State = 28; _localctx._INT = Match(INT);
				 
						_localctx.value =  PumpingLemma.LinearIntegerExpression.SingleTerm(
							(_localctx._INT!=null?int.Parse(_localctx._INT.Text):0),
							PumpingLemma.VariableType.Variable((_localctx._IDENT!=null?_localctx._IDENT.Text:null))
							);
						
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 30; Match(LPAREN);
				State = 31; _localctx.a = terms();
				State = 32; Match(RPAREN);
				 _localctx.value =  _localctx.a.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermsContext : ParserRuleContext {
		public PumpingLemma.LinearIntegerExpression value =  null;
		public TermContext a;
		public TermsContext b;
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(SymbolicStringsParser.PLUS, 0); }
		public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public TermsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terms; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.EnterTerms(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.ExitTerms(this);
		}
	}

	[RuleVersion(0)]
	public TermsContext terms() {
		TermsContext _localctx = new TermsContext(Context, State);
		EnterRule(_localctx, 2, RULE_terms);
		try {
			State = 45;
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37; _localctx.a = term();
				 _localctx.value =  _localctx.a.value; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40; _localctx.a = term();
				State = 41; Match(PLUS);
				State = 42; _localctx.b = terms();

						 _localctx.value =  PumpingLemma.LinearIntegerExpression.Plus(_localctx.a.value, _localctx.b.value); 
						 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public PumpingLemma.LinearIntegerExpression value =  null;
		public IToken _INT;
		public TermsContext a;
		public ITerminalNode INT() { return GetToken(SymbolicStringsParser.INT, 0); }
		public ITerminalNode IDENT() { return GetToken(SymbolicStringsParser.IDENT, 0); }
		public ITerminalNode LPAREN() { return GetToken(SymbolicStringsParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(SymbolicStringsParser.RPAREN, 0); }
		public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 4, RULE_integer);
		try {
			State = 56;
			switch (TokenStream.La(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47; _localctx._INT = Match(INT);
				 _localctx.value =  PumpingLemma.LinearIntegerExpression.Constant((_localctx._INT!=null?int.Parse(_localctx._INT.Text):0)); 
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; Match(IDENT);
				 _localctx.value =  PumpingLemma.LinearIntegerExpression.Variable(TokenStream.GetText(_localctx.Start, TokenStream.Lt(-1))); 
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 51; Match(LPAREN);
				State = 52; _localctx.a = terms();
				State = 53; Match(RPAREN);
				 _localctx.value =  _localctx.a.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordContext : ParserRuleContext {
		public PumpingLemma.SymbolicString value =  null;
		public List<String> symbols =  null;
		public ITerminalNode IDENT() { return GetToken(SymbolicStringsParser.IDENT, 0); }
		public ITerminalNode INT() { return GetToken(SymbolicStringsParser.INT, 0); }
		public WordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_word; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.EnterWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.ExitWord(this);
		}
	}

	[RuleVersion(0)]
	public WordContext word() {
		WordContext _localctx = new WordContext(Context, State);
		EnterRule(_localctx, 6, RULE_word);
		try {
			State = 62;
			switch (TokenStream.La(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; Match(IDENT);

						_localctx.symbols =  PumpingLemma.ParserUtils.splitIntoAlphabetSymbols(TokenStream.GetText(_localctx.Start, TokenStream.Lt(-1)), alphabet);
						if (_localctx.symbols == null)
							word_error = TokenStream.GetText(_localctx.Start, TokenStream.Lt(-1));
						else
							_localctx.value =  PumpingLemma.ParserUtils.wordToSymbolicString(_localctx.symbols);
					
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60; Match(INT);

						_localctx.symbols =  PumpingLemma.ParserUtils.splitIntoAlphabetSymbols(TokenStream.GetText(_localctx.Start, TokenStream.Lt(-1)), alphabet);
						if (_localctx.symbols == null)
							word_error = TokenStream.GetText(_localctx.Start, TokenStream.Lt(-1));
						else
							_localctx.value =  PumpingLemma.ParserUtils.wordToSymbolicString(_localctx.symbols);
					
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbolic_stringContext : ParserRuleContext {
		public PumpingLemma.SymbolicString value =  null;
		public Symbolic_string_hContext a;
		public ITerminalNode Eof() { return GetToken(SymbolicStringsParser.Eof, 0); }
		public Symbolic_string_hContext symbolic_string_h() {
			return GetRuleContext<Symbolic_string_hContext>(0);
		}
		public Symbolic_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolic_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.EnterSymbolic_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.ExitSymbolic_string(this);
		}
	}

	[RuleVersion(0)]
	public Symbolic_stringContext symbolic_string() {
		Symbolic_stringContext _localctx = new Symbolic_stringContext(Context, State);
		EnterRule(_localctx, 8, RULE_symbolic_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; _localctx.a = symbolic_string_h();
			State = 65; Match(Eof);

					if (_localctx.a.value != null)
						_localctx.a.value.flatten();
					_localctx.value =  _localctx.a.value;
				
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbolic_string_hContext : ParserRuleContext {
		public PumpingLemma.SymbolicString value =  null;
		public WordContext w;
		public Symbolic_string_hContext ss;
		public IntegerContext i;
		public Symbolic_string_hContext ssp;
		public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public Symbolic_string_hContext[] symbolic_string_h() {
			return GetRuleContexts<Symbolic_string_hContext>();
		}
		public Symbolic_string_hContext symbolic_string_h(int i) {
			return GetRuleContext<Symbolic_string_hContext>(i);
		}
		public ITerminalNode REPEAT() { return GetToken(SymbolicStringsParser.REPEAT, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(SymbolicStringsParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(SymbolicStringsParser.RPAREN, 0); }
		public Symbolic_string_hContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolic_string_h; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.EnterSymbolic_string_h(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.ExitSymbolic_string_h(this);
		}
	}

	[RuleVersion(0)]
	public Symbolic_string_hContext symbolic_string_h() {
		Symbolic_string_hContext _localctx = new Symbolic_string_hContext(Context, State);
		EnterRule(_localctx, 10, RULE_symbolic_string_h);
		try {
			State = 112;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; _localctx.w = word();
				 _localctx.value =  _localctx.w.value; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; _localctx.w = word();
				State = 72; _localctx.ss = symbolic_string_h();
				 _localctx.value =  PumpingLemma.ParserUtils.join(_localctx.w.value, _localctx.ss.value); 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 75; _localctx.w = word();
				State = 76; Match(REPEAT);
				State = 77; _localctx.i = integer();
				 _localctx.value =  PumpingLemma.ParserUtils.repeatLast(_localctx.w.value, _localctx.i.value); 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 80; _localctx.w = word();
				State = 81; Match(REPEAT);
				State = 82; _localctx.i = integer();
				State = 83; _localctx.ss = symbolic_string_h();

							_localctx.value =  PumpingLemma.ParserUtils.join(
								PumpingLemma.ParserUtils.repeatLast(_localctx.w.value, _localctx.i.value),
								_localctx.ss.value);
						
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 86; Match(LPAREN);
				State = 87; _localctx.ss = symbolic_string_h();
				State = 88; Match(RPAREN);
				 _localctx.value =  _localctx.ss.value; 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 91; Match(LPAREN);
				State = 92; _localctx.ss = symbolic_string_h();
				State = 93; Match(RPAREN);
				State = 94; _localctx.ssp = symbolic_string_h();

							_localctx.value =  PumpingLemma.ParserUtils.join(_localctx.ss.value, _localctx.ssp.value);
						
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 97; Match(LPAREN);
				State = 98; _localctx.ss = symbolic_string_h();
				State = 99; Match(RPAREN);
				State = 100; Match(REPEAT);
				State = 101; _localctx.i = integer();

							_localctx.value =  PumpingLemma.ParserUtils.repeat(_localctx.ss.value, _localctx.i.value);
						
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 104; Match(LPAREN);
				State = 105; _localctx.ss = symbolic_string_h();
				State = 106; Match(RPAREN);
				State = 107; Match(REPEAT);
				State = 108; _localctx.i = integer();
				State = 109; _localctx.ssp = symbolic_string_h();

							_localctx.value =  PumpingLemma.ParserUtils.join(
								PumpingLemma.ParserUtils.repeat(_localctx.ss.value, _localctx.i.value),
								_localctx.ssp.value);
						
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public PumpingLemma.BooleanExpression value =  null;
		public Condition_hContext c;
		public ITerminalNode Eof() { return GetToken(SymbolicStringsParser.Eof, 0); }
		public Condition_hContext condition_h() {
			return GetRuleContext<Condition_hContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 12, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; _localctx.c = condition_h();
			State = 115; Match(Eof);
			 _localctx.value =  _localctx.c.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_hContext : ParserRuleContext {
		public PumpingLemma.BooleanExpression value =  null;
		public Atomic_conditionContext atom;
		public Condition_hContext sub;
		public Condition_hContext sub2;
		public Condition_hContext sub1;
		public Atomic_conditionContext atomic_condition() {
			return GetRuleContext<Atomic_conditionContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(SymbolicStringsParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(SymbolicStringsParser.RPAREN, 0); }
		public Condition_hContext[] condition_h() {
			return GetRuleContexts<Condition_hContext>();
		}
		public Condition_hContext condition_h(int i) {
			return GetRuleContext<Condition_hContext>(i);
		}
		public ITerminalNode AND() { return GetToken(SymbolicStringsParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(SymbolicStringsParser.OR, 0); }
		public ITerminalNode NOT() { return GetToken(SymbolicStringsParser.NOT, 0); }
		public Condition_hContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_h; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.EnterCondition_h(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.ExitCondition_h(this);
		}
	}

	[RuleVersion(0)]
	public Condition_hContext condition_h() {
		Condition_hContext _localctx = new Condition_hContext(Context, State);
		EnterRule(_localctx, 14, RULE_condition_h);
		try {
			State = 156;
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; _localctx.atom = atomic_condition();
				 _localctx.value =  _localctx.atom.value; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; Match(LPAREN);
				State = 122; _localctx.sub = condition_h();
				State = 123; Match(RPAREN);
				 _localctx.value =  _localctx.sub.value; 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 126; _localctx.atom = atomic_condition();
				State = 127; Match(AND);
				State = 128; _localctx.sub2 = condition_h();
				 _localctx.value =  PumpingLemma.LogicalExpression.And(_localctx.atom.value, _localctx.sub2.value); 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 131; Match(LPAREN);
				State = 132; _localctx.sub1 = condition_h();
				State = 133; Match(RPAREN);
				State = 134; Match(AND);
				State = 135; _localctx.sub2 = condition_h();
				 _localctx.value =  PumpingLemma.LogicalExpression.And(_localctx.sub1.value, _localctx.sub2.value); 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 138; _localctx.atom = atomic_condition();
				State = 139; Match(OR);
				State = 140; _localctx.sub2 = condition_h();
				 _localctx.value =  PumpingLemma.LogicalExpression.Or(_localctx.atom.value, _localctx.sub2.value); 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 143; Match(LPAREN);
				State = 144; _localctx.sub1 = condition_h();
				State = 145; Match(RPAREN);
				State = 146; Match(OR);
				State = 147; _localctx.sub2 = condition_h();
				 _localctx.value =  PumpingLemma.LogicalExpression.Or(_localctx.sub1.value, _localctx.sub2.value); 
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 150; Match(NOT);
				State = 151; Match(LPAREN);
				State = 152; _localctx.sub = condition_h();
				State = 153; Match(RPAREN);
				 _localctx.value =  PumpingLemma.LogicalExpression.Not(_localctx.sub.value); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_conditionContext : ParserRuleContext {
		public PumpingLemma.ComparisonExpression value =  null;
		public TermsContext left;
		public TermsContext right;
		public ITerminalNode NEQ() { return GetToken(SymbolicStringsParser.NEQ, 0); }
		public TermsContext[] terms() {
			return GetRuleContexts<TermsContext>();
		}
		public TermsContext terms(int i) {
			return GetRuleContext<TermsContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(SymbolicStringsParser.EQ, 0); }
		public ITerminalNode LT() { return GetToken(SymbolicStringsParser.LT, 0); }
		public ITerminalNode LEQ() { return GetToken(SymbolicStringsParser.LEQ, 0); }
		public ITerminalNode GT() { return GetToken(SymbolicStringsParser.GT, 0); }
		public ITerminalNode GEQ() { return GetToken(SymbolicStringsParser.GEQ, 0); }
		public Atomic_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.EnterAtomic_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISymbolicStringsListener typedListener = listener as ISymbolicStringsListener;
			if (typedListener != null) typedListener.ExitAtomic_condition(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_conditionContext atomic_condition() {
		Atomic_conditionContext _localctx = new Atomic_conditionContext(Context, State);
		EnterRule(_localctx, 16, RULE_atomic_condition);
		try {
			State = 189;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; _localctx.left = terms();
				State = 160; Match(NEQ);
				State = 161; _localctx.right = terms();
				 _localctx.value =  PumpingLemma.ComparisonExpression.NotEqual(_localctx.left.value, _localctx.right.value); 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 164; _localctx.left = terms();
				State = 165; Match(EQ);
				State = 166; _localctx.right = terms();
				 _localctx.value =  PumpingLemma.ComparisonExpression.Equal(_localctx.left.value, _localctx.right.value); 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 169; _localctx.left = terms();
				State = 170; Match(LT);
				State = 171; _localctx.right = terms();
				 _localctx.value =  PumpingLemma.ComparisonExpression.LessThan(_localctx.left.value, _localctx.right.value); 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 174; _localctx.left = terms();
				State = 175; Match(LEQ);
				State = 176; _localctx.right = terms();
				 _localctx.value =  PumpingLemma.ComparisonExpression.LessThanOrEqual(_localctx.left.value, _localctx.right.value); 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 179; _localctx.left = terms();
				State = 180; Match(GT);
				State = 181; _localctx.right = terms();
				 _localctx.value =  PumpingLemma.ComparisonExpression.GreaterThan(_localctx.left.value, _localctx.right.value); 
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 184; _localctx.left = terms();
				State = 185; Match(GEQ);
				State = 186; _localctx.right = terms();
				 _localctx.value =  PumpingLemma.ComparisonExpression.GreaterThanOrEqual(_localctx.left.value, _localctx.right.value); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x14\xC2\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2&\n\x2\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x30\n\x3\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4;\n\x4\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x5\x5\x41\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\as\n\a\x3\b\x3"+
		"\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x9F"+
		"\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x5\n\xC0\n\n\x3\n\x2\x2\v\x2\x4\x6\b\n\f\xE\x10\x12"+
		"\x2\x2\xD3\x2%\x3\x2\x2\x2\x4/\x3\x2\x2\x2\x6:\x3\x2\x2\x2\b@\x3\x2\x2"+
		"\x2\n\x42\x3\x2\x2\x2\fr\x3\x2\x2\x2\xEt\x3\x2\x2\x2\x10\x9E\x3\x2\x2"+
		"\x2\x12\xBF\x3\x2\x2\x2\x14\x15\a\x13\x2\x2\x15&\b\x2\x1\x2\x16\x17\a"+
		"\x12\x2\x2\x17&\b\x2\x1\x2\x18\x19\a\x13\x2\x2\x19\x1A\a\a\x2\x2\x1A\x1B"+
		"\a\x12\x2\x2\x1B&\b\x2\x1\x2\x1C\x1D\a\x12\x2\x2\x1D\x1E\a\a\x2\x2\x1E"+
		"\x1F\a\x13\x2\x2\x1F&\b\x2\x1\x2 !\a\x4\x2\x2!\"\x5\x4\x3\x2\"#\a\x5\x2"+
		"\x2#$\b\x2\x1\x2$&\x3\x2\x2\x2%\x14\x3\x2\x2\x2%\x16\x3\x2\x2\x2%\x18"+
		"\x3\x2\x2\x2%\x1C\x3\x2\x2\x2% \x3\x2\x2\x2&\x3\x3\x2\x2\x2\'(\x5\x2\x2"+
		"\x2()\b\x3\x1\x2)\x30\x3\x2\x2\x2*+\x5\x2\x2\x2+,\a\b\x2\x2,-\x5\x4\x3"+
		"\x2-.\b\x3\x1\x2.\x30\x3\x2\x2\x2/\'\x3\x2\x2\x2/*\x3\x2\x2\x2\x30\x5"+
		"\x3\x2\x2\x2\x31\x32\a\x13\x2\x2\x32;\b\x4\x1\x2\x33\x34\a\x12\x2\x2\x34"+
		";\b\x4\x1\x2\x35\x36\a\x4\x2\x2\x36\x37\x5\x4\x3\x2\x37\x38\a\x5\x2\x2"+
		"\x38\x39\b\x4\x1\x2\x39;\x3\x2\x2\x2:\x31\x3\x2\x2\x2:\x33\x3\x2\x2\x2"+
		":\x35\x3\x2\x2\x2;\a\x3\x2\x2\x2<=\a\x12\x2\x2=\x41\b\x5\x1\x2>?\a\x13"+
		"\x2\x2?\x41\b\x5\x1\x2@<\x3\x2\x2\x2@>\x3\x2\x2\x2\x41\t\x3\x2\x2\x2\x42"+
		"\x43\x5\f\a\x2\x43\x44\a\x2\x2\x3\x44\x45\b\x6\x1\x2\x45\v\x3\x2\x2\x2"+
		"\x46G\x5\b\x5\x2GH\b\a\x1\x2Hs\x3\x2\x2\x2IJ\x5\b\x5\x2JK\x5\f\a\x2KL"+
		"\b\a\x1\x2Ls\x3\x2\x2\x2MN\x5\b\x5\x2NO\a\x6\x2\x2OP\x5\x6\x4\x2PQ\b\a"+
		"\x1\x2Qs\x3\x2\x2\x2RS\x5\b\x5\x2ST\a\x6\x2\x2TU\x5\x6\x4\x2UV\x5\f\a"+
		"\x2VW\b\a\x1\x2Ws\x3\x2\x2\x2XY\a\x4\x2\x2YZ\x5\f\a\x2Z[\a\x5\x2\x2[\\"+
		"\b\a\x1\x2\\s\x3\x2\x2\x2]^\a\x4\x2\x2^_\x5\f\a\x2_`\a\x5\x2\x2`\x61\x5"+
		"\f\a\x2\x61\x62\b\a\x1\x2\x62s\x3\x2\x2\x2\x63\x64\a\x4\x2\x2\x64\x65"+
		"\x5\f\a\x2\x65\x66\a\x5\x2\x2\x66g\a\x6\x2\x2gh\x5\x6\x4\x2hi\b\a\x1\x2"+
		"is\x3\x2\x2\x2jk\a\x4\x2\x2kl\x5\f\a\x2lm\a\x5\x2\x2mn\a\x6\x2\x2no\x5"+
		"\x6\x4\x2op\x5\f\a\x2pq\b\a\x1\x2qs\x3\x2\x2\x2r\x46\x3\x2\x2\x2rI\x3"+
		"\x2\x2\x2rM\x3\x2\x2\x2rR\x3\x2\x2\x2rX\x3\x2\x2\x2r]\x3\x2\x2\x2r\x63"+
		"\x3\x2\x2\x2rj\x3\x2\x2\x2s\r\x3\x2\x2\x2tu\x5\x10\t\x2uv\a\x2\x2\x3v"+
		"w\b\b\x1\x2w\xF\x3\x2\x2\x2xy\x5\x12\n\x2yz\b\t\x1\x2z\x9F\x3\x2\x2\x2"+
		"{|\a\x4\x2\x2|}\x5\x10\t\x2}~\a\x5\x2\x2~\x7F\b\t\x1\x2\x7F\x9F\x3\x2"+
		"\x2\x2\x80\x81\x5\x12\n\x2\x81\x82\a\t\x2\x2\x82\x83\x5\x10\t\x2\x83\x84"+
		"\b\t\x1\x2\x84\x9F\x3\x2\x2\x2\x85\x86\a\x4\x2\x2\x86\x87\x5\x10\t\x2"+
		"\x87\x88\a\x5\x2\x2\x88\x89\a\t\x2\x2\x89\x8A\x5\x10\t\x2\x8A\x8B\b\t"+
		"\x1\x2\x8B\x9F\x3\x2\x2\x2\x8C\x8D\x5\x12\n\x2\x8D\x8E\a\n\x2\x2\x8E\x8F"+
		"\x5\x10\t\x2\x8F\x90\b\t\x1\x2\x90\x9F\x3\x2\x2\x2\x91\x92\a\x4\x2\x2"+
		"\x92\x93\x5\x10\t\x2\x93\x94\a\x5\x2\x2\x94\x95\a\n\x2\x2\x95\x96\x5\x10"+
		"\t\x2\x96\x97\b\t\x1\x2\x97\x9F\x3\x2\x2\x2\x98\x99\a\v\x2\x2\x99\x9A"+
		"\a\x4\x2\x2\x9A\x9B\x5\x10\t\x2\x9B\x9C\a\x5\x2\x2\x9C\x9D\b\t\x1\x2\x9D"+
		"\x9F\x3\x2\x2\x2\x9Ex\x3\x2\x2\x2\x9E{\x3\x2\x2\x2\x9E\x80\x3\x2\x2\x2"+
		"\x9E\x85\x3\x2\x2\x2\x9E\x8C\x3\x2\x2\x2\x9E\x91\x3\x2\x2\x2\x9E\x98\x3"+
		"\x2\x2\x2\x9F\x11\x3\x2\x2\x2\xA0\xC0\x3\x2\x2\x2\xA1\xA2\x5\x4\x3\x2"+
		"\xA2\xA3\a\xE\x2\x2\xA3\xA4\x5\x4\x3\x2\xA4\xA5\b\n\x1\x2\xA5\xC0\x3\x2"+
		"\x2\x2\xA6\xA7\x5\x4\x3\x2\xA7\xA8\a\x11\x2\x2\xA8\xA9\x5\x4\x3\x2\xA9"+
		"\xAA\b\n\x1\x2\xAA\xC0\x3\x2\x2\x2\xAB\xAC\x5\x4\x3\x2\xAC\xAD\a\x10\x2"+
		"\x2\xAD\xAE\x5\x4\x3\x2\xAE\xAF\b\n\x1\x2\xAF\xC0\x3\x2\x2\x2\xB0\xB1"+
		"\x5\x4\x3\x2\xB1\xB2\a\r\x2\x2\xB2\xB3\x5\x4\x3\x2\xB3\xB4\b\n\x1\x2\xB4"+
		"\xC0\x3\x2\x2\x2\xB5\xB6\x5\x4\x3\x2\xB6\xB7\a\xF\x2\x2\xB7\xB8\x5\x4"+
		"\x3\x2\xB8\xB9\b\n\x1\x2\xB9\xC0\x3\x2\x2\x2\xBA\xBB\x5\x4\x3\x2\xBB\xBC"+
		"\a\f\x2\x2\xBC\xBD\x5\x4\x3\x2\xBD\xBE\b\n\x1\x2\xBE\xC0\x3\x2\x2\x2\xBF"+
		"\xA0\x3\x2\x2\x2\xBF\xA1\x3\x2\x2\x2\xBF\xA6\x3\x2\x2\x2\xBF\xAB\x3\x2"+
		"\x2\x2\xBF\xB0\x3\x2\x2\x2\xBF\xB5\x3\x2\x2\x2\xBF\xBA\x3\x2\x2\x2\xC0"+
		"\x13\x3\x2\x2\x2\t%/:@r\x9E\xBF";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
